{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "enclosed-quarter",
   "metadata": {},
   "source": [
    "# Updated from 050522\n",
    "- added IPSC, new mikola AGM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "duplicate-working",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import subprocess\n",
    "\n",
    "#import pkg_resources\n",
    "#required = {'harmonypy','sklearn','scanpy','pandas', 'numpy', 'bbknn', 'scipy', 'matplotlib', 'seaborn' ,'scipy'}\n",
    "#installed = {pkg.key for pkg in pkg_resources.working_set}\n",
    "#missing = required - installed\n",
    "#if missing:\n",
    "#    print(\"Installing missing packages:\" )\n",
    "#    print(missing)\n",
    "#    python = sys.executable\n",
    "#    subprocess.check_call([python, '-m', 'pip', 'install', *missing], stdout=subprocess.DEVNULL)\n",
    "\n",
    "%matplotlib inline\n",
    "from collections import Counter\n",
    "from collections import defaultdict\n",
    "import scanpy as sc\n",
    "import pandas as pd\n",
    "import pickle as pkl\n",
    "import numpy as np\n",
    "from bbknn import bbknn\n",
    "import scipy\n",
    "import matplotlib.pyplot as plt\n",
    "import re\n",
    "import glob\n",
    "import os\n",
    "import sys\n",
    "# from geosketch import gs\n",
    "from numpy import cov\n",
    "import scipy.cluster.hierarchy as spc\n",
    "import seaborn as sns; sns.set(color_codes=True)\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "import sklearn\n",
    "import harmonypy as hm\n",
    "from pathlib import Path\n",
    "\n",
    "sc.settings.verbosity = 3  # verbosity: errors (0), warnings (1), info (2), hints (3)\n",
    "sc.settings.set_figure_params(dpi=300, color_map='viridis')\n",
    "plt.rcParams['figure.figsize'] = [10, 10]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "sufficient-judgment",
   "metadata": {},
   "source": [
    "# Read multiorgan combination data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fiscal-miller",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata = sc.read('/nfs/team205/ig7/work_backups/backup_210306/projects/YS/YS_data/run_A2_V8_YS_multi_organ_build_all_hspc_organs_300522_scvi_.h5ad')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "durable-volleyball",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.obsm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "sustained-tomorrow",
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.set_option('display.max_columns', 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "asian-district",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.obs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "loaded-creek",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.obsm"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "prescription-medication",
   "metadata": {},
   "source": [
    "# Assign basic metadata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "defensive-truth",
   "metadata": {},
   "outputs": [],
   "source": [
    "# KEYS\n",
    "['organ','celltype_for_comparison','dataset_annot','stage']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "organizational-milan",
   "metadata": {},
   "outputs": [],
   "source": [
    "stages = ['CS7', \n",
    "'CS10',\n",
    "'CS11',\n",
    "'CS14',\n",
    "'CS15',\n",
    "'CS17',\n",
    "'CS18',\n",
    "'CS22',\n",
    "'CS23',\n",
    "'7PCW',\n",
    "'8PCW',\n",
    "'9PCW',\n",
    "'11PCW',\n",
    "'12PCW',\n",
    "'13PCW',\n",
    "'14PCW',\n",
    "'15PCW',\n",
    "'16PCW',\n",
    "'17PCW',\n",
    "'19PCW',\n",
    "'iPSC',]\n",
    "stage_groups = [\n",
    "'CS7', \n",
    "'CS10_11',\n",
    "'CS10_11',\n",
    "'CS14_15',\n",
    "'CS14_15',\n",
    "'CS17_18',\n",
    "'CS17_18',\n",
    "'CS22_23',\n",
    "'CS22_23',\n",
    "'7PCW',\n",
    "'8PCW',\n",
    "'9PCW',\n",
    "'11PCW',\n",
    "'12PCW',\n",
    "'13PCW',\n",
    "'14PCW',\n",
    "'15PCW',\n",
    "'16PCW',\n",
    "'17PCW',\n",
    "'19PCW',\n",
    "'iPSC',]\n",
    "stage_groups_order = [\n",
    "'CS7', \n",
    "'CS10_11',\n",
    "'CS14_15',\n",
    "'CS17_18',\n",
    "'CS22_23',\n",
    "'7PCW',\n",
    "'8PCW',\n",
    "'9PCW',\n",
    "'11PCW',\n",
    "'12PCW',\n",
    "'13PCW',\n",
    "'14PCW',\n",
    "'15PCW',\n",
    "'16PCW',\n",
    "'17PCW',\n",
    "'19PCW',\n",
    "'iPSC',]\n",
    "stage_mapper = dict(zip(stages,stage_groups))\n",
    "adata.obs['stage_groups'] = adata.obs['stage'].astype(str).map(stage_mapper)\n",
    "adata.obs['stage_groups'] = pd.Categorical(adata.obs['stage_groups'], categories=stage_groups_order) \n",
    "adata.obs['stage'] = pd.Categorical(adata.obs['stage'], categories=stages) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "imperial-cleaners",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.obs['stage_groups_annot'] = adata.obs['stage_groups'].astype(str)+ '_'+adata.obs['dataset_annot'].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "quantitative-savings",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.obs['dataset_annot']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "auburn-projection",
   "metadata": {},
   "source": [
    "# Slice to celltypes of interest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "seven-qualification",
   "metadata": {},
   "outputs": [],
   "source": [
    "celltypes_keep = ['YS_HSPC_1','YS_HSPC_2','eLIV_HSC','FBM_HSC','GASTRULA_HSPC_lineage','AGM_HSPC_1','AGM_HSPC_2','IPSC_CE_HSPC_2','IPSC_CE_HSPC_1','IPSC_HM_HSPC_2','IPSC_HM_HSPC_1','FLIV_HSC_MPP']\n",
    "adata_HSC = adata[adata.obs['dataset_annot'].isin(celltypes_keep)]\n",
    "list(adata_HSC.obs['dataset_annot'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "clinical-portugal",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata_orig = adata[:]\n",
    "adata = adata_HSC[:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fitted-athletics",
   "metadata": {},
   "source": [
    "# Add DEF and Prim annots into adata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "amber-fleece",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata_ref = sc.read('/nfs/team205/ig7/work_backups/backup_210306/projects/YS/YS_030522_notebooks/Submission_figure_scripts/F3/HSPC_comparison_dotplots/HSPC_DEF_PRIM_assignment.h5ad')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "christian-cigarette",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata_ref.obs['DEF_cell.labels'] = adata_ref.obs['DEF_PRIM_assign'].astype(str) +'_' + adata_ref.obs['cell.labels'].astype(str)\n",
    "adata.obs['DEF_cell.labels'] = adata.obs['cell.labels'].astype(str)\n",
    "adata.obs.loc[adata.obs.index.isin(adata_ref.obs.index),'DEF_cell.labels'] = adata_ref.obs['DEF_cell.labels']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "interesting-macro",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.obs['DEF_cell.labels'] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "invisible-awareness",
   "metadata": {},
   "outputs": [],
   "source": [
    "#quickly check monocyte counts\n",
    "# temp_obs = adata_orig.obs\n",
    "# temp_obs = temp_obs[temp_obs['dataset_annot'].isin(['AGM_Monocyte_ys_1','AGM_Monocyte_0'])]\n",
    "# temp_obs.groupby(['stage','dataset_annot']).apply(len)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "technological-growing",
   "metadata": {},
   "outputs": [],
   "source": [
    "list(adata_orig.obs['dataset_annot'].unique())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "every-screen",
   "metadata": {},
   "source": [
    "# UMAP to show HSPC integration and embedding density"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "recreational-democracy",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.var"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ignored-caribbean",
   "metadata": {},
   "outputs": [],
   "source": [
    "# adata = adata_HSC[:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "demanding-physiology",
   "metadata": {},
   "outputs": [],
   "source": [
    "list(adata.obs['fetal.ids'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cooperative-control",
   "metadata": {},
   "outputs": [],
   "source": [
    "list(adata.obs['organ'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "medieval-friendship",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.obs['batch_remove'] = adata.obs['fetal.ids'].astype(str) + '_' + adata.obs['organ'].astype(str) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dominican-bracelet",
   "metadata": {},
   "outputs": [],
   "source": [
    "# adata = sc.read('./A2_V9_HSPC_YS_GAST_FBM_FLIV_ELIV_IPSCHM_IPSC_CE_AGM_combined_raw_230522.h5ad')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "racial-pharmacology",
   "metadata": {},
   "outputs": [],
   "source": [
    "list(adata.obs['batch_remove'].unique())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "thrown-liverpool",
   "metadata": {},
   "source": [
    "# Create density estimations of all HSCs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "enormous-boating",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # Only consider intersecting genes for normalisation etc\n",
    "# #remove_genes = pd.read_csv('/nfs/team205/ig7/work_backups/backup_210306/projects/YS/YS_090321_notebooks/data_integration_070721/keep_intersecting_genes.csv',index_col=0)\n",
    "# #keep_genes = list(remove_genes['0'])\n",
    "# #adata = adata[:, adata.var.index.isin(keep_genes)]\n",
    "# # sc.pp.normalize_total(adata, target_sum=1e4)\n",
    "# # sc.pp.log1p(adata)\n",
    "# # sc.pp.scale(adata, max_value=10)\n",
    "# sc.pp.highly_variable_genes(adata, min_mean=0.0125, max_mean=3, min_disp=0.5) #batch_key = 'organ'\n",
    "# batch_correction = \"Harmony\" # Will accept Harmony, BBKNN or False as options\n",
    "# #batch = ['lr_batch'] # Will accept any batch categorical. Comma space a batch categorical for each dataset. Position 1 is for data1, position 2 is for data2\n",
    "# batch = ['batch_remove']#['organ']#['batch_remove'] # Will accept any batch categorical. Comma space a batch categorical for each dataset. Position 1 is for data1, position 2 is for data2\n",
    "# sc.pp.pca(adata, n_comps=50, use_highly_variable=True, svd_solver='arpack')\n",
    "# if(batch_correction == \"Harmony\"):\n",
    "#     print(\"Commencing harmony\")\n",
    "#     # Create hm subset\n",
    "#     adata_hm = adata[:]\n",
    "#     # Set harmony variables\n",
    "#     data_mat = np.array(adata_hm.obsm[\"X_pca\"])\n",
    "#     meta_data = adata_hm.obs\n",
    "#     vars_use = batch\n",
    "#     # Run Harmony\n",
    "#     ho = hm.run_harmony(data_mat, meta_data, vars_use,theta = 5)\n",
    "#     res = (pd.DataFrame(ho.Z_corr)).T\n",
    "#     res.columns = ['X{}'.format(i + 1) for i in range(res.shape[1])]\n",
    "#     # Insert coordinates back into object\n",
    "#     adata_hm.obsm[\"X_pca_back\"]= adata_hm.obsm[\"X_pca\"][:]\n",
    "#     adata_hm.obsm[\"X_pca\"] = np.array(res)\n",
    "#     # Run neighbours\n",
    "# #     sc.pp.neighbors(adata_hm, n_neighbors=15, n_pcs=50)\n",
    "# #     sc.tl.umap(adata_hm)\n",
    "#     adata = adata_hm[:]\n",
    "#     del adata_hm\n",
    "# #sc.tl.draw_graph(adata, layout='fa')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "proprietary-automation",
   "metadata": {},
   "outputs": [],
   "source": [
    "#sc.pp.neighbors(adata, n_neighbors=15, n_pcs=50)\n",
    "#sc.pp.neighbors(adata, n_neighbors=15, n_pcs=30)\n",
    "sc.pp.neighbors(adata, n_neighbors=25,n_pcs=8,use_rep = 'X_scvi')\n",
    "sc.tl.umap(adata)\n",
    "sc.pl.umap(adata,color = 'organ',color_map = 'turbo')\n",
    "sc.tl.draw_graph(adata, layout='fa')\n",
    "sc.pl.draw_graph(adata, color = 'organ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "speaking-sleep",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata = sc.read('/nfs/team205/ig7/work_backups/backup_210306/projects/YS/YS_030522_notebooks/Submission_figure_scripts/F3/HSPC_comparison_dotplots/A2_V9_HSPC_YS_GAST_FBM_FLIV_ELIV_IPSCHM_IPSC_CE_AGM_combined_raw_230522.h5ad')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "substantial-indonesian",
   "metadata": {},
   "outputs": [],
   "source": [
    "#del adata.uns['dataset_annot_colors']\n",
    "sc.pl.draw_graph(adata, color = ['organ','dataset_annot'])\n",
    "sc.pl.umap(adata,color =  ['organ','dataset_annot'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "recent-father",
   "metadata": {},
   "outputs": [],
   "source": [
    "# sc.tl.umap(adata)\n",
    "sc.tl.embedding_density(adata, groupby='dataset_annot')\n",
    "map_scores = []\n",
    "for i in adata.obs['dataset_annot'].unique():\n",
    "    # make bg blue\n",
    "    adata.obs['umap_density_dataset_annot_'+i] = adata.obs['umap_density_dataset_annot']\n",
    "    adata.obs.loc[~adata.obs['dataset_annot'].isin([i]),('umap_density_dataset_annot_'+i)] = 0.1\n",
    "    #sc.pl.umap(adata,color = ('umap_density_dataset_annot_'+i),color_map = 'turbo')\n",
    "    map_scores.append('umap_density_dataset_annot_'+i)\n",
    "#sc.pl.umap(adata,color = 'umap_density_dataset_annot',color_map = 'turbo')\n",
    "#sc.pl.embedding_density(adata, groupby='dataset_annot',color_map = 'seismic')\n",
    "sc.pl.umap(adata,color = map_scores,color_map = 'turbo',legend_loc=None,save='HSPC_kernel_density')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "moderate-combining",
   "metadata": {},
   "source": [
    "# add raw data in"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "neutral-physiology",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata_raw = sc.read('/nfs/team205/ig7/work_backups/backup_210306/projects/YS/YS_data/A2_V8_YS_GAST_FBM_FLIV_ELIV_IPSCHM_IPSC_CE_AGM_combined_raw_230522.h5ad')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "prescription-extension",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata = sc.read('/nfs/team205/ig7/work_backups/backup_210306/projects/YS/YS_030522_notebooks/Submission_figure_scripts/F3/HSPC_comparison_dotplots/A2_V10_HSPC_YS_GAST_FBM_FLIV_ELIV_IPSCHM_IPSC_CE_AGM_combined_raw_230522_density_estimated.h5ad')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "reliable-heating",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.obs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "chemical-lawrence",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.obs['organ'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cleared-brand",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.obs[adata.obs['organ'].isin(['AGM'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "sunrise-youth",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.obs.groupby(['organ','stage']).apply(len)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "opponent-repository",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata_raw = adata_raw[adata_raw.obs.index.isin(adata.obs.index)]\n",
    "adata_raw.obs = adata.obs.copy()\n",
    "adata_raw.obsm = adata.obsm.copy()\n",
    "adata_raw.uns = adata.uns.copy()\n",
    "adata_raw.obsp = adata.obsp.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "official-florist",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata = adata_raw.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "reasonable-alpha",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.obs['umap_density_DEF_cell.labels_HSC_MPP'] = adata.obs['umap_density_DEF_cell.labels_HSC/MPP'].copy()\n",
    "# del adata.obs['umap_density_DEF_cell.labels_HSC/MPP']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "pediatric-replacement",
   "metadata": {},
   "source": [
    "# add Def labels into dataset_labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "sorted-gallery",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata_orig = adata[:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "thrown-plaza",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata2 = adata[adata.obs['DEF_cell.labels'].isin(['PRIM_HSPC_1', 'PRIM_HSPC_2', 'DEF_HSPC_2', 'DEF_HSPC_1'])]\n",
    "adata2.obs['DEF_cell.labels'] = 'YS_' + adata2.obs['DEF_cell.labels'].astype(str)\n",
    "adata.obs['dataset_annot'] = adata.obs['dataset_annot'].astype(str)\n",
    "adata.obs.loc[adata.obs.index.isin(adata2.obs.index),'dataset_annot'] = adata2.obs['DEF_cell.labels']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "legal-mercy",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # sc.tl.umap(adata)\n",
    "# sc.tl.embedding_density(adata, groupby='DEF_cell.labels')\n",
    "# map_scores = []\n",
    "# for i in adata.obs['DEF_cell.labels'].unique():\n",
    "#     # make bg blue\n",
    "#     adata.obs['umap_density_DEF_cell.labels_'+i] = adata.obs['umap_density_DEF_cell.labels']\n",
    "#     adata.obs.loc[~adata.obs['DEF_cell.labels'].isin([i]),('umap_density_DEF_cell.labels_'+i)] = 0.1\n",
    "#     #sc.pl.umap(adata,color = ('umap_density_dataset_annot_'+i),color_map = 'turbo')\n",
    "#     map_scores.append('umap_density_DEF_cell.labels_'+i)\n",
    "# #sc.pl.umap(adata,color = 'umap_density_dataset_annot',color_map = 'turbo')\n",
    "# #sc.pl.embedding_density(adata, groupby='dataset_annot',color_map = 'seismic')\n",
    "# sc.pl.umap(adata,color = map_scores,color_map = 'turbo',legend_loc=None,save='HSPC_DEF_PRIM_kernel_density')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "continental-withdrawal",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.obs[i]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "mediterranean-monday",
   "metadata": {},
   "outputs": [],
   "source": [
    "sc.set_figure_params(scanpy=True, dpi=300, dpi_save=150, frameon=True, vector_friendly=True, fontsize=14, figsize= [3,3])\n",
    "# sc.tl.umap(adata)\n",
    "sc.tl.embedding_density(adata, groupby='dataset_annot')\n",
    "map_scores = []\n",
    "for i in adata.obs['dataset_annot'].unique():\n",
    "    # make bg blue\n",
    "    adata.obs['umap_density_dataset_annot_'+i] = adata.obs['umap_density_dataset_annot']\n",
    "    adata.obs.loc[~adata.obs['dataset_annot'].isin([i]),('umap_density_dataset_annot_'+i)] = 0.1\n",
    "    adata.obs.loc[adata.obs['dataset_annot'].isin([i]),('umap_density_dataset_annot_'+i)] = adata.obs.loc[adata.obs['dataset_annot'].isin([i]),('umap_density_dataset_annot_'+i)] + 0.3\n",
    "    #sc.pl.umap(adata,color = ('umap_density_dataset_annot_'+i),color_map = 'turbo')\n",
    "    map_scores.append('umap_density_dataset_annot_'+i)\n",
    "#sc.pl.umap(adata,color = 'umap_density_dataset_annot',color_map = 'turbo')\n",
    "#sc.pl.embedding_density(adata, groupby='dataset_annot',color_map = 'seismic')\n",
    "for i in map_scores:\n",
    "    sc.pl.umap(adata,color = i,color_map = 'turbo',legend_loc=None,save=(i + '_HSPC_DEF_PRIM_kernel_density'),size=((adata.obs[i]+1)*50),vmax = 1,vmin = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "mediterranean-syndicate",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata = sc.read('/nfs/team205/ig7/work_backups/backup_210306/projects/YS/YS_030522_notebooks/Submission_figure_scripts/F3/HSPC_comparison_dotplots/A2_V9_HSPC_YS_GAST_FBM_FLIV_ELIV_IPSCHM_IPSC_CE_AGM_combined_raw_230522_density_estimated.h5ad')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "proof-transsexual",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.obs['organ']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "direct-storm",
   "metadata": {},
   "outputs": [],
   "source": [
    "#adata.obs.loc[adata.obs.index.isin(meta.index),'DEF_cell.labels'] = meta['cell_labels_lvl3']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "upper-vietnamese",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata = sc.read('/nfs/team205/ig7/work_backups/backup_210306/projects/YS/YS_030522_notebooks/Submission_figure_scripts/F3/HSPC_comparison_dotplots/A2_V9_HSPC_YS_GAST_FBM_FLIV_ELIV_IPSCHM_IPSC_CE_AGM_combined_raw_230522.h5ad')\n",
    "adata.obs['stage_organ'] = adata.obs['stage'].astype(str) + '_' +adata.obs['DEF_cell.labels'].astype(str) +'_'+ adata.obs['tissue'].astype(str)\n",
    "stages = ['CS7', \n",
    "'CS10',\n",
    "'CS11',\n",
    "'CS14',\n",
    "'CS15',\n",
    "'CS17',\n",
    "'CS18',\n",
    "'CS22',\n",
    "'CS23',\n",
    "'7PCW',\n",
    "'8PCW',\n",
    "'9PCW',\n",
    "'11PCW',\n",
    "'12PCW',\n",
    "'13PCW',\n",
    "'14PCW',\n",
    "'15PCW',\n",
    "'16PCW',\n",
    "'17PCW',\n",
    "'19PCW',\n",
    "'iPSC',]\n",
    "stage_groups = [\n",
    "'CS7', \n",
    "'CS10_11',\n",
    "'CS10_11',\n",
    "'CS14_15',\n",
    "'CS14_15',\n",
    "'CS17_18',\n",
    "'CS17_18',\n",
    "'CS22_23',\n",
    "'CS22_23',\n",
    "'7PCW',\n",
    "'8PCW',\n",
    "'9PCW',\n",
    "'11PCW',\n",
    "'12PCW',\n",
    "'13PCW',\n",
    "'14PCW',\n",
    "'15PCW',\n",
    "'16PCW',\n",
    "'17PCW',\n",
    "'19PCW',\n",
    "'iPSC',]\n",
    "stage_groups_order = [\n",
    "'CS7', \n",
    "'CS10_11',\n",
    "'CS14_15',\n",
    "'CS17_18',\n",
    "'CS22_23',\n",
    "'7PCW',\n",
    "'8PCW',\n",
    "'9PCW',\n",
    "'11PCW',\n",
    "'12PCW',\n",
    "'13PCW',\n",
    "'14PCW',\n",
    "'15PCW',\n",
    "'16PCW',\n",
    "'17PCW',\n",
    "'19PCW',\n",
    "'iPSC',]\n",
    "stage_mapper = dict(zip(stages,stage_groups))\n",
    "adata.obs['stage_groups'] = adata.obs['stage'].astype(str).map(stage_mapper)\n",
    "adata.obs['stage_groups'] = pd.Categorical(adata.obs['stage_groups'], categories=stage_groups_order) \n",
    "adata.obs['stage'] = pd.Categorical(adata.obs['stage'], categories=stages) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "grand-murder",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "passive-montana",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "known-charge",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "widespread-distribution",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.max(adata[adata.obs['organ'].isin(['YS'])].X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "premier-specific",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.max(adata.X)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "governmental-cisco",
   "metadata": {},
   "source": [
    "## Collapse HSPCs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "recreational-dress",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Collapse HSPCs\n",
    "adata_test = adata[adata.obs['organ'].isin(['YS'])]\n",
    "HSPC_mappings = {'PRIM_HSPC_1':'PRIM_HSPC',\n",
    "'PRIM_HSPC_2':'PRIM_HSPC',\n",
    "'DEF_HSPC_1': 'DEF_HSPC',\n",
    "'DEF_HSPC_2':'DEF_HSPC',}\n",
    "adata_test = adata_test[~adata_test.obs['DEF_cell.labels'].str.contains('unassigned')]\n",
    "adata_test.obs['DEF_cell.labels_collapse'] = adata_test.obs['DEF_cell.labels'].map(HSPC_mappings)\n",
    "adata_test.obs['DEF_cell.labels_collapse'] = adata_test.obs['DEF_cell.labels_collapse'].astype(str)\n",
    "adata_test.obs['stage_organ'] = adata_test.obs['stage_groups'].astype(str) + '_' + adata_test.obs['DEF_cell.labels_collapse'].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "moral-specification",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata_test.obs['stage_organ'] = adata_test.obs['stage_groups'].astype(str) + '_' + adata_test.obs['DEF_cell.labels'].astype(str)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "brilliant-reducing",
   "metadata": {},
   "source": [
    "## Filter Collapse HSPC props"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "instructional-modem",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dataset use\n",
    "adata_test = adata_test\n",
    "# Rank by\n",
    "rank_by = 'stage_organ'\n",
    "# Minimum test proportion\n",
    "min_prop = 5\n",
    "\n",
    "var2 = adata_test.obs['stage_groups']\n",
    "var1 = adata_test.obs['DEF_cell.labels_collapse']\n",
    "tbl = pd.crosstab(var1,var2 )\n",
    "tbl = (((tbl/tbl.sum())*100).T).reset_index(drop=False)\n",
    "tbl = tbl.melt(id_vars='stage_groups')\n",
    "rm_classes = tbl[tbl.value<min_prop]\n",
    "\n",
    "# Slice\n",
    "rm_cells = adata_test.obs.index[adata_test.obs['stage_groups'].isin(rm_classes.iloc[:,0]) & adata_test.obs['DEF_cell.labels_collapse'].isin(rm_classes.iloc[:,1])]\n",
    "adata_test = adata_test[~adata_test.obs.index.isin(rm_cells)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "robust-bulgarian",
   "metadata": {},
   "outputs": [],
   "source": [
    "tbl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "major-immune",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata_test = adata_test[adata_test.obs['DEF_cell.labels_collapse'].str.contains('PRIM')]\n",
    "adata_test = adata_test[adata_test.obs['DEF_cell.labels'].str.contains('HSPC_')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "third-football",
   "metadata": {},
   "outputs": [],
   "source": [
    "#grab raw\n",
    "adata_raw = sc.read('/nfs/team205/ig7/work_backups/backup_210306/projects/YS/YS_data/Submission_2_data/A2_V9_scvi_YS_integrated/A2_V9_scvi_V8_model_selected_raw_qc_scr_umap.h5ad')\n",
    "adata_raw = adata_raw[adata_raw.obs.index.isin(adata_test.obs.index)]\n",
    "adata_raw.obs = adata_test.obs\n",
    "adata_test = adata_raw.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "packed-zambia",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata_test.obs['stage_organ'] = adata_test.obs['stage_organ'].astype('category')\n",
    "list(adata_test.obs['stage_organ'].cat.categories)\n",
    "\n",
    "order = ['CS10_11_PRIM_HSPC_1',\n",
    " 'CS14_15_PRIM_HSPC_1',\n",
    " 'CS17_18_PRIM_HSPC_1',\n",
    " 'CS22_23_PRIM_HSPC_1',\n",
    "         \n",
    "         \n",
    " 'CS10_11_PRIM_HSPC_2',\n",
    " 'CS14_15_PRIM_HSPC_2',\n",
    " 'CS17_18_PRIM_HSPC_2',\n",
    " 'CS22_23_PRIM_HSPC_2']\n",
    "adata_test.obs['stage_organ'] = adata_test.obs['stage_organ'].cat.reorder_categories(order)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "changing-chinese",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define genesets\n",
    "gene_sets = {\n",
    "'metabolic' :['/nfs/team205/ig7/resources/GO-0045333_cell_respiration.csv'],\n",
    "#'cell_cell_adhesion':['/nfs/team205/ig7/resources/GO_0016337_cell_cell_adhesion.csv'],\n",
    "'cell_cycle' : ['/nfs/team205/ig7/resources/GO-0022402_cell_cycle_genes.csv'],\n",
    "#'cell_matrix_adhesion': ['/nfs/team205/ig7/resources/GO_0007160_cell_matrix_adhesion.csv'],\n",
    "#'endo_cell_matrix_adhesion' :[ '/nfs/team205/ig7/resources/GO_0090673_endo_cell_matrix_adhesion.csv'],\n",
    "'apoptosis':['/nfs/team205/ig7/resources/GO_0006915_cell_death_apoptosis.csv'], \n",
    "#'GNF2_SELL':['/nfs/team205/ig7/resources/GNF2_SELL.csv'],\n",
    "#'GNF2_ICAM3':['/nfs/team205/ig7/resources/GNF2_ICAM3.csv'],\n",
    "            }\n",
    "\n",
    "for i in gene_sets.keys():\n",
    "    gene_list_loc = ''.join(str(e) for e in gene_sets[i])\n",
    "    gene_list_name = i\n",
    "    gene_list = list(pd.read_csv(gene_list_loc,header=None)[0])\n",
    "    gene_list = list(adata_test.var.index[adata_test.var.index.isin(gene_list)])\n",
    "    print(len(gene_list))\n",
    "    sc.tl.score_genes(adata_test, gene_list, ctrl_size=50, gene_pool=None, n_bins=15, score_name=(gene_list_name + '_score'), random_state=0, copy=False, use_raw=None)\n",
    "    \n",
    "scores = adata_test.obs[[s + '_score' for s in list(gene_sets.keys())]]\n",
    "scores['group'] = adata_test.obs[rank_by].copy()\n",
    "scores.groupby('group').median()\n",
    "\n",
    "\n",
    "#Plot\n",
    "pal = sns.diverging_palette(240, 10, n=10)\n",
    "score_mean = scores.groupby('group').median()\n",
    "\n",
    "#Z_score the data\n",
    "score_mean= (score_mean - score_mean.mean())/score_mean.std()\n",
    "\n",
    "max_val = (max((np.array(score_mean)).max(0)))\n",
    "min_val = (min((np.array(score_mean)).min(0)))\n",
    "mid_val = (max((np.array(score_mean)).max(0))) - ((max((np.array(score_mean)).max(0))) - (min((np.array(score_mean)).min(0))))/2\n",
    "g = sns.heatmap(score_mean,cmap=pal,  annot=False,vmin=min_val, vmax=max_val, linewidths=1, center=mid_val, square=True, cbar_kws={\"shrink\": 0.5})\n",
    "plt.ylabel(\"cell_type\")\n",
    "plt.xlabel(\"Gene_set\")\n",
    "plt.savefig('./apoptosis_genescore.pdf',dpi=400,figzise=[10,20])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "standing-median",
   "metadata": {},
   "outputs": [],
   "source": [
    "spot_var = rank_by\n",
    "DE_name = 'apoptosis_overtime.csv'\n",
    "sc.tl.rank_genes_groups(adata, spot_var, method='wilcoxon',n_genes=500)\n",
    "sc.pl.rank_genes_groups(adata, n_genes=50, sharey=False)\n",
    "result = adata.uns['rank_genes_groups']\n",
    "groups = result['names'].dtype.names\n",
    "    \n",
    "DE = pd.DataFrame(\n",
    "    {group + '_' + key[:1]: result[key][group]\n",
    "    for group in groups for key in ['names', 'pvals','logfoldchanges']}).head(500)\n",
    "#DE_name =\"./DEGS_gastrulation_211121.csv\"\n",
    "DE.to_csv(DE_name)\n",
    "degs = DE[:]\n",
    "if 'concat' in locals() or 'concat' in globals():\n",
    "    del(concat)\n",
    "n = degs.loc[:, degs.columns.str.endswith(\"_n\")]\n",
    "n = pd.melt(n)\n",
    "p = degs.loc[:, degs.columns.str.endswith(\"_p\")]\n",
    "p = pd.melt(p)\n",
    "l = degs.loc[:, degs.columns.str.endswith(\"_l\")]\n",
    "l = pd.melt(l)\n",
    "n = n.replace(regex=r'_n', value='')\n",
    "n = n.rename(columns={\"variable\": \"cluster\", \"value\": \"gene\"})\n",
    "p = (p.drop([\"variable\"],axis = 1)).rename(columns={ \"value\": \"p_val\"})\n",
    "l = (l.drop([\"variable\"],axis = 1)).rename(columns={ \"value\": \"logfc\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "minute-recorder",
   "metadata": {},
   "outputs": [],
   "source": [
    "concat = pd.concat([n,p,l],axis=1)\n",
    "#remove mito genes from data\n",
    "concat = concat[~concat[\"gene\"].str.startswith(\"MT-\")]\n",
    "concat = concat[~concat[\"gene\"].str.startswith(\"RP11-\")]\n",
    "concat[\"cluster\"] = concat[\"cluster\"].astype(str)\n",
    "marker_df = concat.groupby('cluster').apply(lambda grp: grp.nsmallest(20, 'p_val')).reset_index(drop=True)\n",
    "marker_df = marker_df.groupby('cluster').apply(lambda grp: grp.nlargest(5, 'logfc')).reset_index(drop=True)\n",
    "markers = marker_df.groupby('cluster')['gene'].apply(list).to_dict()\n",
    "markers = dict(sorted(markers.items()))\n",
    "markers = {str(k):v for k,v in markers.items()}\n",
    "data_temp = adata\n",
    "markers = markers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "broadband-bermuda",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "infrared-imperial",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "sporting-spray",
   "metadata": {},
   "outputs": [],
   "source": [
    " markers ={'AEC': ['GJA5', 'IL33', 'CLEC14A', 'TMEM100', 'HSPG2','SOX17'],\n",
    " 'HE': ['RACK1', 'ATP5MC2', 'CD24', 'ATP5F1B', 'ATP5F1A'],\n",
    " 'Immature_EC': ['ENO1', 'LDHB', 'HPGD', 'ARHGAP18', 'FABP5'],\n",
    " 'Sinusoidal_EC': ['B2M', 'DAB2', 'LYVE1', 'STAB2', 'GPX1'],\n",
    " 'VWF_EC': ['ACP5', 'IGFBP7', 'MADCAM1', 'APLNR', 'ICAM1']}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "gentle-burden",
   "metadata": {},
   "outputs": [],
   "source": [
    "(sc.pl.dotplot(data_temp, var_names = markers, groupby=spot_var,dendrogram=False,standard_scale='var', color_map='Reds', show = True, save = 'diff_expression_endo.pdf')) # title=i"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "clinical-fisher",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import gseapy\n",
    "# names = gseapy.get_library_name()\n",
    "\n",
    "# # show top 20 entries.\n",
    "# list(names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "together-projector",
   "metadata": {},
   "outputs": [],
   "source": [
    "marker_df = concat.groupby('cluster').apply(lambda grp: grp.nsmallest(30, 'p_val')).reset_index(drop=True)\n",
    "marker_df = marker_df.groupby('cluster').apply(lambda grp: grp.nlargest(30, 'logfc')).reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "enabling-resort",
   "metadata": {},
   "outputs": [],
   "source": [
    "marker_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "civilian-miracle",
   "metadata": {},
   "outputs": [],
   "source": [
    "enr_res.res2d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "blocked-circle",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import gseapy\n",
    "# gene_set_names = gseapy.get_library_name(database='Human')\n",
    "\n",
    "# for i in list(marker_df['cluster'].unique()):\n",
    "#     #Available databases : 'Human', 'Mouse', 'Yeast', 'Fly', 'Fish', 'Worm' \n",
    "#     import gseapy\n",
    "#     gene_set_names = gseapy.get_library_name(database='Human')\n",
    "#     glist = list(marker_df['gene'][marker_df['cluster'].isin([i])])\n",
    "                                \n",
    "#     enr_res = gseapy.enrichr(gene_list=glist,\n",
    "#                      organism='Human',\n",
    "#                      gene_sets='GO_Biological_Process_2021' ,#'GO_Molecular_Function_2021', #''GO_Biological_Process_2021',\n",
    "#                      description='pathway',\n",
    "#                      cutoff = 0.05)\n",
    "#     enr_res.res2d.to_csv('./'+i+'_enr_res_score.csv')\n",
    "#     gseapy.barplot(enr_res.res2d,title=(i+ '_GO_BP_Signatures'),top_term=15)\n",
    "#     gseapy.dotplot(enr_res.res2d, title=(i+'_GO_BP_Signatures'),cmap='viridis_r',top_term=15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "stuck-belly",
   "metadata": {},
   "outputs": [],
   "source": [
    "scipy.sparse.csr_matrix()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "center-paraguay",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "useful-cement",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "broken-knife",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "average-liechtenstein",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cubic-partnership",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "administrative-express",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.write('./A2_V9_HSPC_YS_GAST_FBM_FLIV_ELIV_IPSCHM_IPSC_CE_AGM_combined_raw_230522.h5ad')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "integral-reducing",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata = sc.read('./A2_V9_HSPC_YS_GAST_FBM_FLIV_ELIV_IPSCHM_IPSC_CE_AGM_combined_raw_230522.h5ad')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fuzzy-semiconductor",
   "metadata": {},
   "outputs": [],
   "source": [
    " #adata = sc.read('./A2_V9_HSPC_YS_GAST_FBM_FLIV_ELIV_IPSCHM_IPSC_CE_AGM_combined_raw_230522.h5ad')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "adjusted-empire",
   "metadata": {},
   "outputs": [],
   "source": [
    "'umap_density_dataset_annot_'+i"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "developmental-huntington",
   "metadata": {},
   "outputs": [],
   "source": [
    "sc.pl.umap(adata,color = ['SPINK2','MLLT3'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "median-compression",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.write('/nfs/team205/ig7/work_backups/backup_210306/projects/YS/YS_data/HSPC_only_run_A2_V8_YS_HSPC_multi_organ_build_all_hspc_organs_300522_scvi_.h5ad')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "related-plymouth",
   "metadata": {},
   "source": [
    "# Plot markers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "forward-failing",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata = sc.read('/nfs/team205/ig7/work_backups/backup_210306/projects/YS/YS_030522_notebooks/Submission_figure_scripts/F3/HSPC_comparison_dotplots/A2_V9_HSPC_YS_GAST_FBM_FLIV_ELIV_IPSCHM_IPSC_CE_AGM_combined_raw_230522_density_estimated.h5ad')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "charged-brass",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata_raw = sc.read('/nfs/team205/ig7/work_backups/backup_210306/projects/YS/YS_data/Submission_2_data/A2_V9_scvi_YS_integrated/A2_V9_scvi_V8_model_selected_raw_qc_scr_umap.h5ad')\n",
    "adata_raw = adata_raw[adata_raw.obs.index.isin(adata.obs.index)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "falling-newman",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata_norm = adata[adata.obs['organ'].isin(['YS'])]\n",
    "adata_raw = adata_raw[:,list(adata.var.index)]\n",
    "adata_raw.obs = adata_norm.obs\n",
    "adata_raw.obsm = adata_norm.obsm\n",
    "adata_raw.obsp = adata_norm.obsp\n",
    "adata_raw.uns = adata_norm.uns\n",
    "adata_multi = adata[~adata.obs['organ'].isin(['YS'])]\n",
    "adata_multi = adata_multi.concatenate(adata_raw,join='inner',index_unique=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "thousand-budapest",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.write('/nfs/team205/ig7/work_backups/backup_210306/projects/YS/YS_030522_notebooks/Submission_figure_scripts/F3/HSPC_comparison_dotplots/A2_V10_HSPC_YS_GAST_FBM_FLIV_ELIV_IPSCHM_IPSC_CE_AGM_combined_raw_230522_density_estimated.h5ad')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "damaged-washington",
   "metadata": {},
   "outputs": [],
   "source": [
    "general_hsc = {\n",
    "'HSC':[\"CD34\",\t\"MLLT3\",\t\"SPINK2\",\t\"HOPX\",\t\"HLF\",\t\"CLEC9A\",'PROM1','HLA-DRA','HLA-DRB1',\t'SOX17',\"HOXA3\",\t\"HOXA4\",\t\"HOXA5\",\t\"HOXA7\",\t\"HOXA10\",\"ICAM3\",\t\"SELL\",\t\"PLAC8\",\t\"CD74\"],#\n",
    "}\n",
    "\n",
    "general_hsc_surface_markers = {\n",
    "'HSC_markers':[\"CD34\",\t\"MLLT3\",\t\"SPINK2\",\t\"HOPX\",\"MLLT3\",\"MECOM\",\t\"HLF\",\"HLF\"],#\n",
    "'HSC_maturity_markers':[\"CLEC9A\",\"FLT3\",\"CD48\",'PROM1','HLA-DRA','HLA-DRB1',],\n",
    "'HSC_surface_tetraspaninis':['CD9','CD81','CD63','CD24','CD74'],\n",
    "'HSC_maintenance':[\"SOX17\",\"HOXA3\",\t\"HOXA4\",\t\"HOXA5\",\t\"HOXA7\",\t\"HOXA9\",\"HOXA10\"],\n",
    "}\n",
    "\n",
    "\n",
    "# HE_origin = {\n",
    "# 'HSC':[\"KDR\",\t\"FLT1\",\t\"CDH5\",],\n",
    "# }\n",
    "\n",
    "HE_origin_alternate_adhesion_combined = {\n",
    "#'HSC':[\"PLVAP\",\t\"PECAM1\",\"ESAM\",\t\"CDH5\",\t\"FLT1\",\"KDR\",'ALDH1A1' , 'KCNK17',\"ICAM3\",\t\"SELL\",\t\"PLAC8\",\t\"CD74\"],\n",
    "#HSC':[\"PLVAP\",\"ESAM\",\"PECAM1\",\t\"CDH5\",\t\"FLT1\",\"KDR\", 'KCNK17',\"ICAM3\",\t\"SELL\",\t\"PLAC8\",\t\"CD74\"],\n",
    "'HSC':[\"PLVAP\",\"ESAM\",\"PECAM1\",\t\"CDH5\",\t\"FLT1\",\"KDR\", 'KCNK17'],\n",
    "}\n",
    "\n",
    "# YS_HSP_DE_difinitive = {\n",
    "# 'HSC':[\"ICAM3\",\t\"SELL\",\t\"PLAC8\",\t\"CD74\",\t\"SOX17\",],\n",
    "# }\n",
    "\n",
    "# YS_HSP_DE_difinitive_alternate = {\n",
    "# 'HSC':[\"ICAM3\",\t\"SELL\",\t\"PLAC8\",\t\"CD74\",\t\"SOX17\",\"CD63\",\t\"CD37\",],\n",
    "# }\n",
    "\n",
    "\n",
    "general_hsc_surface_markers_supp_HSC_survival = {\n",
    "'HSC_surface_tetraspaninis':['CD9','CD81','CD63','CD24','CD74'],\n",
    "'HSC_maturity_markers':['PROM1','HLA-DRA','HLA-DRB1',\"CLEC9A\",\"FLT3\",\"CD48\"],\n",
    "}\n",
    "\n",
    "hannah_mikola_HSPC_waves = {\n",
    "'Landmark':['CDH5','RUNX1','KCNK17','CD44','PTPRC','SPN','ITGA2B'],\n",
    "'Common_HSPC':['HLF','SPINK2','RAB27B','SMIM24','MYB'],\n",
    "'Definitive_trans_reg':['RUNX1T1','MECOM','MLLT3','NKX2-3','EAF2','BCL11A'],\n",
    "'Definitive_HSC_markers':['PROCR','EMCN','GBP4','CD74','ACE','ITGA4','KIT'],\n",
    "'Early_HPC':['LIN28A','DDIT4','SLC2A3','RGS16','FGF23','GAD1','MT1E','STXBP6'],\n",
    "'HOXAB':['HOXA7','HOXA9','HOXB7','HOXB9'],\n",
    "}\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "characteristic-conference",
   "metadata": {},
   "outputs": [],
   "source": [
    "list(adata.obs['dataset_annot'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "statistical-context",
   "metadata": {},
   "outputs": [],
   "source": [
    "sc.pp.normalize_total(data_temp , target_sum=1e4)\n",
    "sc.pp.log1p(data_temp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "informal-yugoslavia",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata = adata[adata.obs['dataset_annot'].isin([\n",
    "'YS_PRIM_HSPC_1',\n",
    " 'YS_PRIM_HSPC_2',\n",
    " 'YS_DEF_HSPC_2',\n",
    " 'YS_DEF_HSPC_1',\n",
    " 'eLIV_HSC',\n",
    " 'FBM_HSC',\n",
    " 'GASTRULA_HSPC_lineage',\n",
    " 'AGM_HSPC_2',\n",
    " 'AGM_HSPC_1',\n",
    " 'IPSC_CE_HSPC_2',\n",
    " 'IPSC_CE_HSPC_1',\n",
    " 'IPSC_HM_HSPC_1',\n",
    " 'IPSC_HM_HSPC_2',\n",
    " 'FLIV_HSC_MPP'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "blocked-chain",
   "metadata": {},
   "outputs": [],
   "source": [
    "# order these categories by lineage time\n",
    "ordering =  [ \n",
    "'GASTRULA_HSPC_lineage',\n",
    " 'YS_PRIM_HSPC_1',\n",
    " 'YS_PRIM_HSPC_2',\n",
    " 'YS_DEF_HSPC_2',\n",
    " 'YS_DEF_HSPC_1',\n",
    "'AGM_HSPC_1',\n",
    "'AGM_HSPC_2',           \n",
    "'eLIV_HSC',\n",
    "'FLIV_HSC_MPP',\n",
    " 'FBM_HSC',\n",
    " 'IPSC_CE_HSPC_1',\n",
    " 'IPSC_CE_HSPC_2',\n",
    " 'IPSC_HM_HSPC_1',\n",
    " 'IPSC_HM_HSPC_2',\n",
    "]\n",
    "adata.obs['dataset_annot'] = adata.obs['dataset_annot'].cat.reorder_categories(ordering)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "consecutive-content",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_temp = adata\n",
    "markers = HE_origin_alternate_adhesion_combined\n",
    "spot_var = 'dataset_annot'\n",
    "save_title = 'HE_origin_alternate_adhesion_combined_v8_with_IPSC'\n",
    "(sc.pl.dotplot(data_temp, var_names = markers, groupby=spot_var,dendrogram=False, color_map='Reds', show = True,standard_scale='var',save =save_title))\n",
    "sc.pl.stacked_violin(data_temp ,var_names= markers, groupby=spot_var,  log=False, use_raw=None, num_categories=7, title=None, colorbar_title='Median exp', figsize=None, dendrogram=False, gene_symbols=None, var_group_positions=None, var_group_labels=None, standard_scale='var', var_group_rotation=None, layer=None, stripplot=False, jitter=False, size=1, scale='width', yticklabels=False, order=None, swap_axes=False, show=None, save=save_title, return_fig=False, row_palette=None, cmap='Reds', ax=None, vmin=None, vmax=None, vcenter=None, norm=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "married-rover",
   "metadata": {},
   "source": [
    "## add stages to this analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "monthly-peoples",
   "metadata": {},
   "outputs": [],
   "source": [
    "YS_HSC = adata[adata.obs['dataset_annot'].isin(['GASTRULA_HSPC_lineage',\n",
    " 'YS_PRIM_HSPC_1',\n",
    " 'YS_PRIM_HSPC_2', 'YS_DEF_HSPC_2',\n",
    " 'YS_DEF_HSPC_1',])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dimensional-documentation",
   "metadata": {},
   "outputs": [],
   "source": [
    "YS_HSC.obs['stage']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "sunrise-convertible",
   "metadata": {},
   "outputs": [],
   "source": [
    "YS_HSC.obs['stage_groups'] = YS_HSC.obs['dataset_annot'][:]\n",
    "YS_HSC.obs['stage_groups'] = YS_HSC.obs['stage_groups'].astype(str)\n",
    "stages= ['CS7','CS10', 'CS11', 'CS22', 'CS23', 'CS14', 'CS17', 'CS18', 'CS15']\n",
    "groups = ['CS7','CS10_11', 'CS10_11', 'CS22_23', 'CS22_23', 'CS14_15', 'CS17_CS18', 'CS17_CS18', 'CS14_15']\n",
    "dic = dict(zip(stages,groups))\n",
    "#YS_HSC.obs['stage_groups'] = YS_HSC.obs['stage'].map(dic)\n",
    "YS_HSC.obs.loc[YS_HSC.obs['stage'].isin(stages),'stage_groups'] = YS_HSC.obs['stage'].map(dic)\n",
    "YS_HSC.obs['stage_groups'].unique()\n",
    "# order these categories by lineage time\n",
    "YS_HSC.obs['stage_groups'] = YS_HSC.obs['stage_groups'].str.replace('Gastrula_HSPC_lineage_Yolk Sac_gastrulation','CS7')\n",
    "\n",
    "ordering =  ['CS7', 'CS10_11', 'CS14_15', 'CS17_18','CS22_23']\n",
    "# YS_HSC.obs['stage_groups'] = pd.Categorical(YS_HSC.obs['stage_groups'], categories=ordering) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "accessible-return",
   "metadata": {},
   "outputs": [],
   "source": [
    "list(adata.obs['stage_groups_annot'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "analyzed-juice",
   "metadata": {},
   "outputs": [],
   "source": [
    "hannah_mikola_HSPC_waves = {\n",
    "'Early_HPC':['LIN28A','DDIT4','SLC2A3','RGS16','FGF23','GAD1','MT1E','STXBP6'],\n",
    "'HOXAB':['HOXA7','HOXA9','HOXB7','HOXB9'],\n",
    "'Landmark':['CDH5','RUNX1','KCNK17','CD44','PTPRC','SPN','ITGA2B'],\n",
    "'Common_HSPC':['HLF','SPINK2','RAB27B','SMIM24','MYB'],\n",
    "'Definitive_trans_reg':['RUNX1T1','MECOM','MLLT3','NKX2-3','EAF2','BCL11A'],\n",
    "'Definitive_HSC_markers':['PROCR','EMCN','GBP4','CD74','ACE','ITGA4','KIT'],\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "patent-granny",
   "metadata": {},
   "outputs": [],
   "source": [
    "general_hsc_v2 = {\n",
    "'Canonical':[\"CD34\",\"MLLT3\",\t\"SPINK2\",\t\"HOPX\",\t\"HLF\",'RAB27B','MYB'],\n",
    "'HSPC2_specific':[\"MKI67\",\"CDK1\"],\n",
    "'Primitive_Specific':['LIN28A','DDIT4','SLC2A3','RGS16','FGF23','GAD1','MT1E','STXBP6'],\n",
    "'Definitive_Specific':['PROCR','EMCN','GBP4','CD74','ACE','ITGA4','KIT'],\n",
    "'Developmental stage specific':['CLEC9A','PROM1','HLA-DRA','HLA-DRB1'],\n",
    "'Adhesion':[\"ICAM3\",\t\"SELL\",\t\"PLAC8\",\t\"CD74\"],\n",
    "'patterning':['SOX17',\"HOXA3\",\t\"HOXA4\",\t\"HOXA5\",\t\"HOXA7\",\"HOXA9\",\"HOXA10\",'HOXB7','HOXB9',],\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "introductory-alcohol",
   "metadata": {},
   "outputs": [],
   "source": [
    "general_hsc_v3 = {\n",
    "'Canonical':[\"CD34\",\"MLLT3\",\t\"SPINK2\",\t\"HOPX\",\t\"HLF\",'RAB27B','MYB'],\n",
    "'Primitive_Specific':['LIN28A','DDIT4','SLC2A3','RGS16','FGF23','GAD1','MT1E','STXBP6'],\n",
    "'Definitive_Specific':['PROCR','EMCN','GBP4','CD74','ACE','ITGA4','KIT'],\n",
    "# 'Developmental stage specific':['CLEC9A','PROM1','HLA-DRA','HLA-DRB1'],\n",
    "# 'Adhesion':[\"ICAM3\",\t\"SELL\",\t\"PLAC8\",\t\"CD74\"],\n",
    "'patterning':['SOX17',\"HOXA3\",\t\"HOXA4\",\t\"HOXA5\",\t\"HOXA7\",\"HOXA9\",\"HOXA10\",'HOXB7','HOXB9',],\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "binary-target",
   "metadata": {},
   "outputs": [],
   "source": [
    "YS_HSC.obs['stage_groups_annot'] = YS_HSC.obs['stage_groups'].astype(str)+ '_'+YS_HSC.obs['dataset_annot'].astype(str)\n",
    "adata.obs['stage_groups_annot'] = adata.obs['dataset_annot'].astype(str)\n",
    "adata.obs.loc[adata.obs.index.isin(YS_HSC.obs.index),'stage_groups_annot'] = YS_HSC.obs['stage_groups_annot']\n",
    "\n",
    "adata.obs['stage_groups_annot'] = adata.obs['stage_groups_annot'].str.replace('CS22_23_YS_PRIM_HSPC_1','CS22_23_YS_DEF_HSPC_1')\n",
    "adata.obs['stage_groups_annot'] = adata.obs['stage_groups_annot'].str.replace('CS22_23_YS_PRIM_HSPC_2','CS22_23_YS_DEF_HSPC_2')\n",
    "\n",
    "#adata = adata[~adata.obs['stage_groups_annot'].isin(['CS22_23_YS_PRIM_HSPC_1','CS22_23_YS_PRIM_HSPC_2'])]\n",
    "\n",
    "adata.obs['stage_groups_annot'] = adata.obs['stage_groups_annot'].astype('category')\n",
    "\n",
    "\n",
    "adata = adata[adata.obs['stage_groups_annot'].isin(['CS10_11_YS_PRIM_HSPC_1',\n",
    " 'CS10_11_YS_PRIM_HSPC_2',\n",
    " 'CS22_23_YS_DEF_HSPC_1',\n",
    "#  'CS22_23_YS_PRIM_HSPC_1',\n",
    " 'CS22_23_YS_DEF_HSPC_2',\n",
    "#  'CS22_23_YS_PRIM_HSPC_2',\n",
    " 'CS14_15_YS_PRIM_HSPC_1',\n",
    " 'CS14_15_YS_DEF_HSPC_2',\n",
    " 'CS14_15_YS_DEF_HSPC_1',\n",
    " 'CS14_15_YS_PRIM_HSPC_2',\n",
    " 'CS17_CS18_YS_DEF_HSPC_2',\n",
    " 'CS17_CS18_YS_PRIM_HSPC_2',\n",
    " 'CS17_CS18_YS_DEF_HSPC_1',\n",
    " 'CS17_CS18_YS_PRIM_HSPC_1',\n",
    " 'eLIV_HSC',\n",
    " 'FBM_HSC',\n",
    " 'CS7_GASTRULA_HSPC_lineage',\n",
    " 'AGM_HSPC_2',\n",
    " 'AGM_HSPC_1',\n",
    " 'IPSC_CE_HSPC_2',\n",
    " 'IPSC_CE_HSPC_1',\n",
    " 'IPSC_HM_HSPC_1',\n",
    " 'IPSC_HM_HSPC_2',\n",
    " 'FLIV_HSC_MPP'])]\n",
    "# ordering =  ['CS7_Gastrula_HSPC_lineage_Yolk Sac_gastrulation',\n",
    "#  'CS10_11_YS_HSPC_1',\n",
    "#  'CS10_11_YS_HSPC_2',\n",
    "#  'CS14_15_YS_HSPC_2',\n",
    "#  'CS14_15_YS_HSPC_1',\n",
    "#  'CS18_YS_HSPC_1',\n",
    "#  'CS18_YS_HSPC_2',\n",
    "#  'CS22_23_YS_HSPC_1',\n",
    "#  'CS22_23_YS_HSPC_2',\n",
    "#  'AGM_10_HSPC',\n",
    "#  'EL_HSC',\n",
    "#  'FBM_HSC/MPP',\n",
    "#  'HSPC_2_IPSC',\n",
    "#  'HSPC_1_IPSC']\n",
    "# ordering =  [\n",
    "# 'CS7_GASTRULA_HSPC_lineage',\n",
    "# 'CS10_11_YS_PRIM_HSPC_1',\n",
    "#  'CS10_11_YS_PRIM_HSPC_2',\n",
    "#  'CS14_15_YS_PRIM_HSPC_1',\n",
    "#  'CS14_15_YS_PRIM_HSPC_2',\n",
    "    \n",
    "\n",
    "#  'CS14_15_YS_DEF_HSPC_1',\n",
    "#  'CS14_15_YS_DEF_HSPC_2',\n",
    "#  'CS17_CS18_YS_PRIM_HSPC_1',    \n",
    "#  'CS17_CS18_YS_PRIM_HSPC_2',\n",
    "#  'CS17_CS18_YS_DEF_HSPC_1',\n",
    "# 'CS17_CS18_YS_DEF_HSPC_2',\n",
    "#  'CS22_23_YS_PRIM_HSPC_1',\n",
    "#  'CS22_23_YS_PRIM_HSPC_2',\n",
    "#  'CS22_23_YS_DEF_HSPC_1',\n",
    "#  'CS22_23_YS_DEF_HSPC_2',\n",
    "#  'eLIV_HSC',\n",
    "#  'FLIV_HSC_MPP',\n",
    "#  'AGM_HSPC_1',\n",
    "# 'AGM_HSPC_2',\n",
    "#  'FBM_HSC',\n",
    "#  'IPSC_CE_HSPC_1',\n",
    "#  'IPSC_CE_HSPC_2',\n",
    "#  'IPSC_HM_HSPC_1',\n",
    "#  'IPSC_HM_HSPC_2',\n",
    "# ]\n",
    "\n",
    "ordering =  [\n",
    "'CS7_GASTRULA_HSPC_lineage',\n",
    "'CS10_11_YS_PRIM_HSPC_1',\n",
    " 'CS10_11_YS_PRIM_HSPC_2',\n",
    " 'CS14_15_YS_PRIM_HSPC_1',\n",
    " 'CS14_15_YS_PRIM_HSPC_2',\n",
    " 'CS17_CS18_YS_PRIM_HSPC_1',    \n",
    " 'CS17_CS18_YS_PRIM_HSPC_2',    \n",
    "#  'CS22_23_YS_PRIM_HSPC_1',\n",
    "#  'CS22_23_YS_PRIM_HSPC_2',\n",
    "    \n",
    " 'CS14_15_YS_DEF_HSPC_1',\n",
    " 'CS14_15_YS_DEF_HSPC_2',\n",
    " 'CS17_CS18_YS_DEF_HSPC_1',\n",
    "'CS17_CS18_YS_DEF_HSPC_2',\n",
    " 'CS22_23_YS_DEF_HSPC_1',\n",
    " 'CS22_23_YS_DEF_HSPC_2',\n",
    " 'eLIV_HSC',\n",
    " 'FLIV_HSC_MPP',\n",
    " 'AGM_HSPC_1',\n",
    " 'AGM_HSPC_2',\n",
    " 'FBM_HSC',\n",
    " 'IPSC_CE_HSPC_1',\n",
    " 'IPSC_CE_HSPC_2',\n",
    " 'IPSC_HM_HSPC_1',\n",
    " 'IPSC_HM_HSPC_2',\n",
    "]\n",
    "adata.obs['stage_groups_annot'] = adata.obs['stage_groups_annot'].cat.reorder_categories(ordering)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "stuffed-double",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.rcdefaults()\n",
    "data_temp = adata\n",
    "markers = general_hsc_v2\n",
    "spot_var = 'stage_groups_annot'\n",
    "save_title = 'supp_general_hsc_v8'\n",
    "\n",
    "(sc.pl.dotplot(data_temp, var_names = markers, groupby=spot_var,dendrogram=False, color_map='Reds', show = True,standard_scale='var',save =save_title))\n",
    "sc.pl.stacked_violin(data_temp ,var_names= markers, groupby=spot_var,  log=False, use_raw=None, num_categories=7, title=None, colorbar_title='Median exp', figsize=None, dendrogram=False, gene_symbols=None, var_group_positions=None, var_group_labels=None, standard_scale='var', var_group_rotation=None, layer=None, stripplot=False, jitter=False, size=1, scale='width', yticklabels=False, order=None, swap_axes=False, show=None, save=save_title, return_fig=False, row_palette=None, cmap='Reds', ax=None, vmin=None, vmax=None, vcenter=None, norm=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "loved-ticket",
   "metadata": {},
   "source": [
    "# Collapse HSPCS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "activated-glenn",
   "metadata": {},
   "outputs": [],
   "source": [
    "spot_var = 'stage_groups_annot'\n",
    "adata = adata[~adata.obs[spot_var].str.contains('HSPC_2')]\n",
    "adata.obs['stage_groups_annots_collapse'] = adata.obs[spot_var].copy()\n",
    "adata.obs['stage_groups_annots_collapse'] = adata.obs['stage_groups_annots_collapse'].str.replace('HSPC_1','HSPC')\n",
    "#adata.obs['stage_groups_annots_collapse'] = adata.obs['stage_groups_annots_collapse'].str.replace('HSPC_2','HSPC')\n",
    "spot_var = 'stage_groups_annots_collapse'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "least-ethiopia",
   "metadata": {},
   "outputs": [],
   "source": [
    "spot_var"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "productive-attempt",
   "metadata": {},
   "outputs": [],
   "source": [
    "list(adata.obs[spot_var].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "removed-passing",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.obs.groupby([spot_var]).apply(len)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "portuguese-scroll",
   "metadata": {},
   "outputs": [],
   "source": [
    "ordering =  [\n",
    " 'CS7_GASTRULA_HSPC_lineage',\n",
    "'CS10_11_YS_PRIM_HSPC',\n",
    " 'CS14_15_YS_PRIM_HSPC',\n",
    " 'CS17_CS18_YS_PRIM_HSPC',\n",
    " 'CS14_15_YS_DEF_HSPC',\n",
    " 'CS17_CS18_YS_DEF_HSPC',\n",
    " 'CS22_23_YS_DEF_HSPC',\n",
    " 'eLIV_HSC',\n",
    " 'FLIV_HSC_MPP',\n",
    " 'AGM_HSPC',\n",
    " 'FBM_HSC',\n",
    " 'IPSC_CE_HSPC',\n",
    " 'IPSC_HM_HSPC',\n",
    "]\n",
    "adata.obs[spot_var] = adata.obs[spot_var].astype('category')\n",
    "adata.obs[spot_var] = adata.obs[spot_var].cat.reorder_categories(ordering)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "organized-petroleum",
   "metadata": {},
   "outputs": [],
   "source": [
    "general_hsc_v3 = {\n",
    "'Canonical':[\"CD34\",\"MLLT3\",\t\"SPINK2\",\t\"HOPX\",\t\"HLF\",'RAB27B','MYB'],\n",
    "'Primitive_Specific':['DDIT4','SLC2A3','RGS16','LIN28A',],\n",
    "'Definitive_Specific':['KIT','ITGA4','CD74','PROCR','EMCN','GBP4','ACE'],\n",
    "# 'Developmental stage specific':['CLEC9A','PROM1','HLA-DRA','HLA-DRB1'],\n",
    "# 'Adhesion':[\"ICAM3\",\t\"SELL\",\t\"PLAC8\",\t\"CD74\"],\n",
    "'patterning':[\t\"HOXA7\",\"HOXA9\",\"HOXA10\",'HOXB7','HOXB9'],#SOX17',\"HOXA3\",\t\"HOXA4\",\t\"HOXA5\",\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "brilliant-falls",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.rcdefaults()\n",
    "data_temp = adata\n",
    "markers = general_hsc_v3\n",
    "spot_var = 'stage_groups_annots_collapse'\n",
    "save_title = 'main_general_hsc_v8'\n",
    "\n",
    "(sc.pl.dotplot(data_temp, var_names = markers, groupby=spot_var,dendrogram=False, color_map='Reds', show = True,standard_scale='var',save =save_title))\n",
    "sc.pl.stacked_violin(data_temp ,var_names= markers, groupby=spot_var,  log=False, use_raw=None, num_categories=7, title=None, colorbar_title='Median exp', figsize=None, dendrogram=False, gene_symbols=None, var_group_positions=None, var_group_labels=None, standard_scale='var', var_group_rotation=None, layer=None, stripplot=False, jitter=False, size=1, scale='width', yticklabels=False, order=None, swap_axes=False, show=None, save=save_title, return_fig=False, row_palette=None, cmap='Reds', ax=None, vmin=None, vmax=None, vcenter=None, norm=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "accurate-yellow",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.rcdefaults()\n",
    "data_temp = adata\n",
    "markers = general_hsc_v3\n",
    "spot_var = 'stage_groups_annot'\n",
    "save_title = 'general_hsc_v8_v3'\n",
    "\n",
    "(sc.pl.dotplot(data_temp, var_names = markers, groupby=spot_var,dendrogram=False, color_map='Reds', show = True,standard_scale='var',save =save_title))\n",
    "sc.pl.stacked_violin(data_temp ,var_names= markers, groupby=spot_var,  log=False, use_raw=None, num_categories=7, title=None, colorbar_title='Median exp', figsize=None, dendrogram=False, gene_symbols=None, var_group_positions=None, var_group_labels=None, standard_scale='var', var_group_rotation=None, layer=None, stripplot=False, jitter=False, size=1, scale='width', yticklabels=False, order=None, swap_axes=False, show=None, save=save_title, return_fig=False, row_palette=None, cmap='Reds', ax=None, vmin=None, vmax=None, vcenter=None, norm=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "difficult-wages",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.rcdefaults()\n",
    "data_temp = adata\n",
    "markers = general_hsc_v3\n",
    "spot_var = 'dataset_annot'\n",
    "save_title = 'general_hsc_v8_dataset_anot'\n",
    "\n",
    "(sc.pl.dotplot(data_temp, var_names = markers, groupby=spot_var,dendrogram=False, color_map='Reds', show = True,standard_scale='var',save =save_title))\n",
    "sc.pl.stacked_violin(data_temp ,var_names= markers, groupby=spot_var,  log=False, use_raw=None, num_categories=7, title=None, colorbar_title='Median exp', figsize=None, dendrogram=False, gene_symbols=None, var_group_positions=None, var_group_labels=None, standard_scale='var', var_group_rotation=None, layer=None, stripplot=False, jitter=False, size=1, scale='width', yticklabels=False, order=None, swap_axes=False, show=None, save=save_title, return_fig=False, row_palette=None, cmap='Reds', ax=None, vmin=None, vmax=None, vcenter=None, norm=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "documented-visit",
   "metadata": {},
   "source": [
    "# Prim HSPC survival"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "neutral-black",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata = sc.read('/nfs/team205/ig7/work_backups/backup_210306/projects/YS/YS_030522_notebooks/Submission_figure_scripts/F3/HSPC_comparison_dotplots/A2_V10_HSPC_YS_GAST_FBM_FLIV_ELIV_IPSCHM_IPSC_CE_AGM_combined_raw_230522_density_estimated.h5ad')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cubic-advocate",
   "metadata": {},
   "outputs": [],
   "source": [
    "sc.pp.normalize_total(data_temp , target_sum=1e4)\n",
    "sc.pp.log1p(data_temp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "closing-apparel",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata = adata[adata.obs['dataset_annot'].isin([\n",
    "'YS_PRIM_HSPC_1',\n",
    " 'YS_PRIM_HSPC_2',\n",
    " 'YS_DEF_HSPC_2',\n",
    " 'YS_DEF_HSPC_1',\n",
    " 'eLIV_HSC',\n",
    " 'FBM_HSC',\n",
    " 'GASTRULA_HSPC_lineage',\n",
    " 'AGM_HSPC_2',\n",
    " 'AGM_HSPC_1',\n",
    " 'IPSC_CE_HSPC_2',\n",
    " 'IPSC_CE_HSPC_1',\n",
    " 'IPSC_HM_HSPC_1',\n",
    " 'IPSC_HM_HSPC_2',\n",
    " 'FLIV_HSC_MPP'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "administrative-gates",
   "metadata": {},
   "outputs": [],
   "source": [
    "# order these categories by lineage time\n",
    "ordering =  [ \n",
    "'GASTRULA_HSPC_lineage',\n",
    " 'YS_PRIM_HSPC_1',\n",
    " 'YS_PRIM_HSPC_2',\n",
    " 'YS_DEF_HSPC_2',\n",
    " 'YS_DEF_HSPC_1',\n",
    "'AGM_HSPC_1',\n",
    "'AGM_HSPC_2',           \n",
    "'eLIV_HSC',\n",
    "'FLIV_HSC_MPP',\n",
    " 'FBM_HSC',\n",
    " 'IPSC_CE_HSPC_1',\n",
    " 'IPSC_CE_HSPC_2',\n",
    " 'IPSC_HM_HSPC_1',\n",
    " 'IPSC_HM_HSPC_2',\n",
    "]\n",
    "adata.obs['dataset_annot'] = adata.obs['dataset_annot'].cat.reorder_categories(ordering)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "floppy-measurement",
   "metadata": {},
   "source": [
    "## add stages to this analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "light-likelihood",
   "metadata": {},
   "outputs": [],
   "source": [
    "YS_HSC = adata[adata.obs['dataset_annot'].isin(['GASTRULA_HSPC_lineage',\n",
    " 'YS_PRIM_HSPC_1',\n",
    " 'YS_PRIM_HSPC_2', 'YS_DEF_HSPC_2',\n",
    " 'YS_DEF_HSPC_1',])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "casual-aluminum",
   "metadata": {},
   "outputs": [],
   "source": [
    "YS_HSC.obs['stage_groups'] = YS_HSC.obs['dataset_annot'][:]\n",
    "YS_HSC.obs['stage_groups'] = YS_HSC.obs['stage_groups'].astype(str)\n",
    "stages= ['CS7','CS10', 'CS11', 'CS22', 'CS23', 'CS14', 'CS17', 'CS18', 'CS15']\n",
    "groups = ['CS7','CS10_11', 'CS10_11', 'CS22_23', 'CS22_23', 'CS14_15', 'CS17_CS18', 'CS17_CS18', 'CS14_15']\n",
    "dic = dict(zip(stages,groups))\n",
    "#YS_HSC.obs['stage_groups'] = YS_HSC.obs['stage'].map(dic)\n",
    "YS_HSC.obs.loc[YS_HSC.obs['stage'].isin(stages),'stage_groups'] = YS_HSC.obs['stage'].map(dic)\n",
    "YS_HSC.obs['stage_groups'].unique()\n",
    "# order these categories by lineage time\n",
    "YS_HSC.obs['stage_groups'] = YS_HSC.obs['stage_groups'].str.replace('Gastrula_HSPC_lineage_Yolk Sac_gastrulation','CS7')\n",
    "\n",
    "ordering =  ['CS7', 'CS10_11', 'CS14_15', 'CS17_18','CS22_23']\n",
    "# YS_HSC.obs['stage_groups'] = pd.Categorical(YS_HSC.obs['stage_groups'], categories=ordering) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "arctic-pizza",
   "metadata": {},
   "outputs": [],
   "source": [
    "list(adata.obs['stage_groups_annot'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "numerical-powder",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata_HSC_prim = adata[adata.obs['dataset_annot'].isin(['GASTRULA_HSPC_lineage',\n",
    " 'YS_PRIM_HSPC_1',\n",
    " 'YS_PRIM_HSPC_2'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "civic-prescription",
   "metadata": {},
   "outputs": [],
   "source": [
    "survival = {\n",
    "'Survival':['PDK1','CD81','IGFBP2','RAC2',],\n",
    "'Transmigration':['RAC1','ADAM10','CD9'],\n",
    "'Potentiation':['RUNX1','EZH2'],\n",
    "# 'Liver_Homing':['CXCR4','CXCL12'],\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "stuck-organizer",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata_HSC_prim.obs['stage_groups_HSPC'] = adata_HSC_prim.obs['stage_groups'].astype(str)+'_'+'PRIM_HSPC'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "sustained-kentucky",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.rcdefaults()\n",
    "data_temp = adata_HSC_prim\n",
    "markers = survival\n",
    "# spot_var = 'stage_groups_annot'\n",
    "spot_var = 'stage_groups_HSPC'\n",
    "save_title = 'Supp_V8_HSPC_AGM_surival_time_v2'\n",
    "\n",
    "(sc.pl.dotplot(data_temp, figsize=[5,6],var_names = markers, groupby=spot_var,dendrogram=False, color_map='Reds', show = True,swap_axes=False,standard_scale='var',save =save_title))\n",
    "sc.pl.stacked_violin(data_temp ,var_names= markers, groupby=spot_var,  log=False, use_raw=None, num_categories=7, title=None, colorbar_title='Median exp', figsize=None, dendrogram=False, gene_symbols=None, var_group_positions=None, var_group_labels=None, standard_scale='var', var_group_rotation=None, layer=None, stripplot=False, jitter=False, size=1, scale='width', yticklabels=False, order=None, swap_axes=False, show=None, save=save_title, return_fig=False, row_palette=None, cmap='Reds', ax=None, vmin=None, vmax=None, vcenter=None, norm=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "settled-occupation",
   "metadata": {},
   "source": [
    "# DEF HSPC survival"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "guided-impression",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata_HSC_prim = adata[adata.obs['dataset_annot'].isin([\n",
    " 'YS_DEF_HSPC_1',\n",
    " 'YS_DEF_HSPC_2'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "wrapped-illness",
   "metadata": {},
   "outputs": [],
   "source": [
    "survival = {\n",
    "'Survival':['PDK1','CD81','IGFBP2','RAC2',],\n",
    "'Transmigration':['RAC1','ADAM10','CD9'],\n",
    "'Potentiation':['RUNX1','EZH2'],\n",
    "# 'Liver_Homing':['CXCR4','CXCL12'],\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "threaded-exhibit",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata_HSC_prim.obs['stage_groups_HSPC'] = adata_HSC_prim.obs['stage_groups'].astype(str)+'_'+'PRIM_HSPC'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ambient-warren",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.rcdefaults()\n",
    "data_temp = adata_HSC_prim\n",
    "markers = survival\n",
    "# spot_var = 'stage_groups_annot'\n",
    "spot_var = 'stage_groups_HSPC'\n",
    "save_title = 'Supp_V8_HSPC_DEF_AGM_surival_time_v2'\n",
    "\n",
    "(sc.pl.dotplot(data_temp, figsize=[5,6],var_names = markers, groupby=spot_var,dendrogram=False, color_map='Reds', show = True,swap_axes=False,standard_scale='var',save =save_title))\n",
    "sc.pl.stacked_violin(data_temp ,var_names= markers, groupby=spot_var,  log=False, use_raw=None, num_categories=7, title=None, colorbar_title='Median exp', figsize=None, dendrogram=False, gene_symbols=None, var_group_positions=None, var_group_labels=None, standard_scale='var', var_group_rotation=None, layer=None, stripplot=False, jitter=False, size=1, scale='width', yticklabels=False, order=None, swap_axes=False, show=None, save=save_title, return_fig=False, row_palette=None, cmap='Reds', ax=None, vmin=None, vmax=None, vcenter=None, norm=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "blessed-talent",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "classified-earthquake",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "adjustable-sterling",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ready-system",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_temp = adata\n",
    "markers = general_hsc\n",
    "spot_var = 'dataset_annot'\n",
    "save_title = 'general_hsc_v5_with_IPSC'\n",
    "\n",
    "(sc.pl.dotplot(data_temp, var_names = markers, groupby=spot_var,dendrogram=False, color_map='Reds', show = True,standard_scale='var',save =save_title))\n",
    "sc.pl.stacked_violin(data_temp ,var_names= markers, groupby=spot_var,  log=False, use_raw=None, num_categories=7, title=None, colorbar_title='Median exp', figsize=None, dendrogram=False, gene_symbols=None, var_group_positions=None, var_group_labels=None, standard_scale='var', var_group_rotation=None, layer=None, stripplot=False, jitter=False, size=1, scale='width', yticklabels=False, order=None, swap_axes=False, show=None, save=save_title, return_fig=False, row_palette=None, cmap='Reds', ax=None, vmin=None, vmax=None, vcenter=None, norm=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "exempt-assignment",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_temp = adata\n",
    "markers = HE_origin_alternate_adhesion_combined\n",
    "spot_var = 'dataset_annot'\n",
    "save_title = 'HE_origin_alternate_v5_with_IPSC'\n",
    "\n",
    "(sc.pl.dotplot(data_temp, var_names = markers, groupby=spot_var,dendrogram=False, color_map='Reds', show = True,standard_scale='var',save =save_title))\n",
    "sc.pl.stacked_violin(data_temp ,var_names= markers, groupby=spot_var,  log=False, use_raw=None, num_categories=7, title=None, colorbar_title='Median exp', figsize=None, dendrogram=False, gene_symbols=None, var_group_positions=None, var_group_labels=None, standard_scale='var', var_group_rotation=None, layer=None, stripplot=False, jitter=False, size=1, scale='width', yticklabels=False, order=None, swap_axes=False, show=None, save=save_title, return_fig=False, row_palette=None, cmap='Reds', ax=None, vmin=None, vmax=None, vcenter=None, norm=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "qualified-railway",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata = sc.read('/nfs/team205/ig7/work_backups/backup_210306/projects/YS/YS_090321_notebooks/HSPC_comp/batch_by_organ_SCVI_HSPC_integration_output_batch_dataset_20220119.h5ad')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "traditional-palace",
   "metadata": {},
   "outputs": [],
   "source": [
    "gene_sets = {'metabolic' :['/nfs/team205/ig7/resources/GO-0045333_cell_respiration.csv'],\n",
    "'cell_cycle' : ['/nfs/team205/ig7/resources/GO-0022402_cell_cycle_genes.csv'],\n",
    "'cell_cell_adhesion':['/nfs/team205/ig7/resources/GO_0016337_cell_cell_adhesion.csv'],\n",
    "'cell_matrix_adhesion': ['/nfs/team205/ig7/resources/GO_0007160_cell_matrix_adhesion.csv'],\n",
    "'endo_cell_matrix_adhesion' :[ '/nfs/team205/ig7/resources/GO_0090673_endo_cell_matrix_adhesion.csv'],\n",
    "'GNF2_SELL':['/nfs/team205/ig7/resources/GNF2_SELL.csv'],\n",
    "'GNF2_ICAM3':['/nfs/team205/ig7/resources/GNF2_ICAM3.csv'],}\n",
    "for i in gene_sets.keys():\n",
    "    gene_list_loc = ''.join(str(e) for e in gene_sets[i])\n",
    "    gene_list_name = i\n",
    "    gene_list = list(pd.read_csv(gene_list_loc,header=None)[0])\n",
    "    gene_list = list(adata.var.index[adata.var.index.isin(gene_list)])\n",
    "    print(len(gene_list))\n",
    "    sc.tl.score_genes(adata, gene_list, ctrl_size=50, gene_pool=None, n_bins=25, score_name=(gene_list_name + '_score'), random_state=0, copy=False, use_raw=None)\n",
    "    \n",
    "scores = adata.obs[[s + '_score' for s in list(gene_sets.keys())]]\n",
    "scores['group'] = adata.obs['dataset']\n",
    "scores.groupby('group').median()\n",
    "sns.heatmap(scores.groupby('group').median(),  annot=True,vmin=-1, vmax=1, linewidths=1, center=0, square=True, cbar_kws={\"shrink\": 0.5})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "modular-testimony",
   "metadata": {},
   "outputs": [],
   "source": [
    "sc.pp.neighbors(adata, n_neighbors=20, n_pcs=10)\n",
    "sc.tl.umap(adata)\n",
    "sc.pl.umap(adata,color = 'dataset_annot')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "enabling-money",
   "metadata": {},
   "outputs": [],
   "source": [
    "sc.pl.umap(adata,color = 'dataset_annot')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "moved-usage",
   "metadata": {},
   "outputs": [],
   "source": [
    "sc.tl.embedding_density(adata, groupby='dataset_annot')\n",
    "map_scores = []\n",
    "for i in adata.obs['dataset_annot'].unique():\n",
    "    # make bg blue\n",
    "    adata.obs['umap_density_dataset_annot_'+i] = adata.obs['umap_density_dataset_annot']\n",
    "    adata.obs.loc[~adata.obs['dataset_annot'].isin([i]),('umap_density_dataset_annot_'+i)] = 0.1\n",
    "    #sc.pl.umap(adata,color = ('umap_density_dataset_annot_'+i),color_map = 'turbo')\n",
    "    map_scores.append('umap_density_dataset_annot_'+i)\n",
    "#sc.pl.umap(adata,color = 'umap_density_dataset_annot',color_map = 'turbo')\n",
    "#sc.pl.embedding_density(adata, groupby='dataset_annot',color_map = 'seismic')\n",
    "sc.pl.umap(adata,color = map_scores,color_map = 'turbo',legend_loc=None,save = ('all_density_HSC'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "visible-alcohol",
   "metadata": {},
   "outputs": [],
   "source": [
    "sc.tl.embedding_density(adata, groupby='dataset_annot')\n",
    "map_scores = []\n",
    "for i in adata.obs['dataset_annot'].unique():\n",
    "    # make bg blue\n",
    "    adata.obs['umap_density_dataset_annot_'+i] = adata.obs['umap_density_dataset_annot']\n",
    "    adata.obs.loc[~adata.obs['dataset_annot'].isin([i]),('umap_density_dataset_annot_'+i)] = 0.1\n",
    "    #sc.pl.umap(adata,color = ('umap_density_dataset_annot_'+i),color_map = 'turbo')\n",
    "    map_scores.append('umap_density_dataset_annot_'+i)\n",
    "    \n",
    "    sc.pl.umap(adata,color = map_scores,color_map = 'turbo',legend_loc=None,save = (i+'_density_HSC'))\n",
    "    \n",
    "#sc.pl.umap(adata,color = 'umap_density_dataset_annot',color_map = 'turbo')\n",
    "#sc.pl.embedding_density(adata, groupby='dataset_annot',color_map = 'seismic')\n",
    "sc.pl.umap(adata,color = map_scores,color_map = 'turbo',legend_loc=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "horizontal-concept",
   "metadata": {},
   "source": [
    "# cell cycle scoring"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "anticipated-iceland",
   "metadata": {},
   "outputs": [],
   "source": [
    "gene_sets = {#'metabolic' :['/nfs/team205/ig7/resources/GO-0045333_cell_respiration.csv'],\n",
    "'cell_cycle' : ['/nfs/team205/ig7/resources/GO-0022402_cell_cycle_genes.csv'],\n",
    "# 'cell_cell_adhesion':['/nfs/team205/ig7/resources/GO_0016337_cell_cell_adhesion.csv'],\n",
    "# 'cell_matrix_adhesion': ['/nfs/team205/ig7/resources/GO_0007160_cell_matrix_adhesion.csv'],\n",
    "# 'endo_cell_matrix_adhesion' :[ '/nfs/team205/ig7/resources/GO_0090673_endo_cell_matrix_adhesion.csv'],\n",
    "# 'GNF2_SELL':['/nfs/team205/ig7/resources/GNF2_SELL.csv'],\n",
    "# 'GNF2_ICAM3':['/nfs/team205/ig7/resources/GNF2_ICAM3.csv'],}\n",
    "            }\n",
    "for i in gene_sets.keys():\n",
    "    gene_list_loc = ''.join(str(e) for e in gene_sets[i])\n",
    "    gene_list_name = i\n",
    "    gene_list = list(pd.read_csv(gene_list_loc,header=None)[0])\n",
    "    gene_list = list(adata.var.index[adata.var.index.isin(gene_list)])\n",
    "    print(len(gene_list))\n",
    "    sc.tl.score_genes(adata, gene_list, ctrl_size=50, gene_pool=None, n_bins=25, score_name=(gene_list_name + '_score'), random_state=0, copy=False, use_raw=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "integrated-focus",
   "metadata": {},
   "outputs": [],
   "source": [
    "cycle_2 = ['CDK1','MKI67']\n",
    "sc.tl.score_genes(adata,cycle_2 , ctrl_size=50, gene_pool=None, n_bins=25, score_name=('cycle_2' + '_score'), random_state=0, copy=False, use_raw=None)\n",
    "gene_sets ={\n",
    "    'cell_cycle' : ['/nfs/team205/ig7/resources/GO-0022402_cell_cycle_genes.csv'],\n",
    "    'cycle_2':[]\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "optimum-terror",
   "metadata": {},
   "outputs": [],
   "source": [
    "# order these categories by lineage time\n",
    "ordering =  ['Gastrula_HSPC_lineage_Yolk Sac_gastrulation',\n",
    " 'YS_HSPC_1',\n",
    " 'YS_HSPC_2',\n",
    " 'AGM_10_HSPC',\n",
    " 'EL_HSC',\n",
    " 'FBM_HSC/MPP']\n",
    "adata.obs['dataset_annot'] = pd.Categorical(adata.obs['dataset_annot'], categories=ordering) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "prostate-antenna",
   "metadata": {},
   "outputs": [],
   "source": [
    "scores = adata.obs[[s + '_score' for s in list(gene_sets.keys())]]\n",
    "scores['group'] = adata.obs['dataset_annot']\n",
    "scores_median = scores.groupby('group').median()\n",
    "scores.groupby('group').median()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "global-harassment",
   "metadata": {},
   "outputs": [],
   "source": [
    "sns_plot = sns.heatmap(scores_temp.groupby('group').median(),  annot=False,vmin=float(np.min(scores_temp.groupby('group').median())), vmax=float(np.max(scores_temp.groupby('group').median())), linewidths=1, center=float(np.mean(scores_temp.groupby('group').median())), square=True, cbar_kws={\"shrink\": 0.5},cmap = \"vlag\")\n",
    "sns_plot.figure.savefig(\"./HPSC_prolif.pdf\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "explicit-hayes",
   "metadata": {},
   "outputs": [],
   "source": [
    "concat = pd.concat([n,p,l],axis=1)\n",
    "#remove mito genes from data\n",
    "concat = concat[~concat[\"gene\"].str.startswith(\"MT-\")]\n",
    "concat = concat[~concat[\"gene\"].str.startswith(\"RP11-\")]\n",
    "concat[\"cluster\"] = concat[\"cluster\"].astype(str)\n",
    "marker_df = concat.groupby('cluster').apply(lambda grp: grp.nlargest(20, 'logfc')).reset_index(drop=True)\n",
    "marker_df = marker_df.groupby('cluster').apply(lambda grp: grp.nsmallest(10, 'pvals_adj')).reset_index(drop=True)\n",
    "markers = marker_df.groupby('cluster')['gene'].apply(list).to_dict()\n",
    "markers = dict(sorted(markers.items()))\n",
    "markers = {str(k):v for k,v in markers.items()}\n",
    "data_temp = YS_HSC \n",
    "markers = markers\n",
    "(sc.pl.dotplot(data_temp, var_names = markers, groupby=spot_var,dendrogram=False, color_map='Reds', show = True,standard_scale='var',save= 'clotting_over_time'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "steady-monaco",
   "metadata": {},
   "source": [
    "# Dotplots for HSC_surival _cut"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "silent-cooler",
   "metadata": {},
   "outputs": [],
   "source": [
    "YS_HSC = adata[adata.obs['dataset_annot'].isin(['Gastrula_HSPC_lineage_Yolk Sac_gastrulation', 'YS_HSPC_1', 'YS_HSPC_2'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "personal-operation",
   "metadata": {},
   "outputs": [],
   "source": [
    "YS_HSC.obs['stage_groups'] = YS_HSC.obs['dataset_annot'][:]\n",
    "YS_HSC.obs['stage_groups'] = YS_HSC.obs['stage_groups'].astype(str)\n",
    "stages= ['CS10', 'CS11', 'CS22', 'CS23', 'CS14', 'CS18', 'CS15']\n",
    "groups = ['CS10_11', 'CS10_11', 'CS22_23', 'CS22_23', 'CS14_15', 'CS18', 'CS14_15']\n",
    "dic = dict(zip(stages,groups))\n",
    "#YS_HSC.obs['stage_groups'] = YS_HSC.obs['stage'].map(dic)\n",
    "YS_HSC.obs.loc[YS_HSC.obs['stage'].isin(stages),'stage_groups'] = YS_HSC.obs['stage'].map(dic)\n",
    "YS_HSC.obs['stage_groups'].unique()\n",
    "# order these categories by lineage time\n",
    "YS_HSC.obs['stage_groups'] = YS_HSC.obs['stage_groups'].str.replace('Gastrula_HSPC_lineage_Yolk Sac_gastrulation','CS7')\n",
    "\n",
    "ordering =  ['CS7', 'CS10_11', 'CS14_15', 'CS18','CS22_23']\n",
    "YS_HSC.obs['stage_groups'] = pd.Categorical(YS_HSC.obs['stage_groups'], categories=ordering) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "expensive-imagination",
   "metadata": {},
   "outputs": [],
   "source": [
    "lineage_bias = {\n",
    "'YS_HSPC_migration':['CD9','CD81','IGFBP2','RAC1','RAC2','ADAM10','RUNX1'],\n",
    "'EMP_generation':['EZH2'],\n",
    "    'HSC_maturity_markers':[\"CLEC9A\",\"FLT3\",\"CD48\",'PROM1','HLA-DRA','HLA-DRB1',],\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "sharing-medication",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "lineage_bias = {\n",
    "'YS_HSPC_migration':['CD9','CD81','IGFBP2','RAC1','RAC2','RUNX1'],\n",
    "'EMP_generation':['EZH2'],\n",
    "'Migration':['ADAM10'],\n",
    "# 'HSC_maturity_markers':[\"CD48\",'PROM1','HLA-DRA',],\n",
    "}\n",
    "data = YS_HSC[:]\n",
    "plot_name = 'survival_over_time'\n",
    "plot_var = 'stage_groups'\n",
    "markers = lineage_bias\n",
    "\n",
    "sc.pl.matrixplot(data, var_names = markers, groupby=plot_var, dendrogram=False,\n",
    "                 colorbar_title='mean z-score',  vmin=-2, vmax=3, vcenter=-0.2,cmap='RdBu_r',swap_axes=False,save = plot_name)\n",
    "(sc.pl.dotplot(data, var_names = markers, groupby=plot_var,dendrogram=False, color_map='Reds', show = True,standard_scale='var',swap_axes=True,save = plot_name,dot_max=0.5,figsize =[4,5]))\n",
    "sc.pl.stacked_violin(data ,var_names= markers, groupby=plot_var, log=False, use_raw=None, num_categories=7, title=None, colorbar_title='Median exp', figsize=None, dendrogram=False, gene_symbols=None, var_group_positions=None, var_group_labels=None, standard_scale=None, var_group_rotation=None, layer=None, stripplot=False, jitter=False, size=1, scale='width', yticklabels=False, order=None, swap_axes=True, show=None, return_fig=False, row_palette=None, cmap='Reds', ax=None, vmin=None, vmax=None, vcenter=None, norm=None,save = plot_name)\n",
    "#YS_HSC, var_names = lineage_bias, groupby='stage_groups',dendrogram=False, color_map='Reds', show = True,standard_scale='var')\n",
    "sc.pl.tracksplot(data ,var_names= markers, groupby=plot_var, use_raw=None, log=False, dendrogram=False, gene_symbols=None, var_group_positions=None, var_group_labels=None, layer=None, show=None, save=None )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "advance-hungarian",
   "metadata": {},
   "source": [
    "# Dotplots for HSC_surival full"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "removed-editing",
   "metadata": {},
   "outputs": [],
   "source": [
    "lineage_bias = {\n",
    "'YS_HSPC_migration':['CD9','CD81','IGFBP2','RAC1','RAC2'],\n",
    "'EMP_generation':['EZH2'],\n",
    "'transmigration':['ADAM10'],\n",
    "'Mega_k_transition':['ITGA2B','FLI1','TPT1'],\n",
    "'ery_transition_inhibition':['CD24','RUNX3','SERPINB1'],\n",
    "'HB_genes':['HBZ','HBA1','HBG1','HBE1'],\n",
    "'ery_bias':['GATA1','KLF1','ALAS2'],\n",
    "'survival':['IGFBP2','THPO'],\n",
    "'CD74':['CD74'],\n",
    "'long_term_engraftment':['CD63','SOX17'],\n",
    "#'erypsis':[\"TAL1\",\t\"LMO2\",\t\"LDB1\",\t\"GATA1\",\t\"MYB\",\t\"ZFPM1\",\t\"KLF1\",\t\"KLF3\",\t\"KLF11\",\t\"FLI1\",\t\"RB1\",\t\"SPI1\",\t\"EPOR\",\t\"STAT5A\",\t\"TRIM10\",\t\"GATA2\",],\n",
    "#'mkpsis':[\"RUNX1\",\t\"MPL\",\t\"NFE2\",],\n",
    "}\n",
    "\n",
    "lineage_bias = {\n",
    "'YS_HSPC_migration':['CD9','CD81','IGFBP2','RAC1','RAC2'],\n",
    "'EMP_generation':['EZH2'],\n",
    "'transmigration':['ADAM10','PLAC8','ICAM1','SELL'],\n",
    "#'erypsis':[\"TAL1\",\t\"LMO2\",\t\"LDB1\",\t\"GATA1\",\t\"MYB\",\t\"ZFPM1\",\t\"KLF1\",\t\"KLF3\",\t\"KLF11\",\t\"FLI1\",\t\"RB1\",\t\"SPI1\",\t\"EPOR\",\t\"STAT5A\",\t\"TRIM10\",\t\"GATA2\",],\n",
    "#'mkpsis':[\"RUNX1\",\t\"MPL\",\t\"NFE2\",],\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "advised-radical",
   "metadata": {},
   "outputs": [],
   "source": [
    "YS_HSC = adata[adata.obs['dataset_annot'].isin(['Gastrula_HSPC_lineage_Yolk Sac_gastrulation', 'YS_HSPC_1', 'YS_HSPC_2'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "younger-trouble",
   "metadata": {},
   "outputs": [],
   "source": [
    "YS_HSC.obs['stage_groups'] = YS_HSC.obs['dataset_annot'][:]\n",
    "YS_HSC.obs['stage_groups'] = YS_HSC.obs['stage_groups'].astype(str)\n",
    "stages= ['CS10', 'CS11', 'CS22', 'CS23', 'CS14', 'CS18', 'CS15']\n",
    "groups = ['CS10_11', 'CS10_11', 'CS22_23', 'CS22_23', 'CS14_15', 'CS18', 'CS14_15']\n",
    "dic = dict(zip(stages,groups))\n",
    "#YS_HSC.obs['stage_groups'] = YS_HSC.obs['stage'].map(dic)\n",
    "YS_HSC.obs.loc[YS_HSC.obs['stage'].isin(stages),'stage_groups'] = YS_HSC.obs['stage'].map(dic)\n",
    "YS_HSC.obs['stage_groups'].unique()\n",
    "# order these categories by lineage time\n",
    "YS_HSC.obs['stage_groups'] = YS_HSC.obs['stage_groups'].str.replace('Gastrula_HSPC_lineage_Yolk Sac_gastrulation','CS7')\n",
    "\n",
    "\n",
    "ordering =  ['CS7', 'CS10_11', 'CS14_15', 'CS18','CS22_23']\n",
    "YS_HSC.obs['stage_groups'] = pd.Categorical(YS_HSC.obs['stage_groups'], categories=ordering) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "smaller-boxing",
   "metadata": {},
   "outputs": [],
   "source": [
    "#YS_HSC.obs.groupby(['stage_groups','component',]).count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "pending-diary",
   "metadata": {},
   "outputs": [],
   "source": [
    "lineage_bias = {\n",
    "'YS_HSPC_migration':['CD9','CD81','IGFBP2','RAC1','RAC2','ADAM10','RUNX1'],\n",
    "'EMP_generation':['EZH2'],\n",
    "'transmigration':['PLAC8','ICAM1','SELL','CCL4','CXCR4','CXCL12'],\n",
    "#'LT_HSC_BM_homing':['CCR3','CCR9',,'IL18','KIT','CDH5'],\n",
    "#'erypsis':[\"TAL1\",\t\"LMO2\",\t\"LDB1\",\t\"GATA1\",\t\"MYB\",\t\"ZFPM1\",\t\"KLF1\",\t\"KLF3\",\t\"KLF11\",\t\"FLI1\",\t\"RB1\",\t\"SPI1\",\t\"EPOR\",\t\"STAT5A\",\t\"TRIM10\",\t\"GATA2\",],\n",
    "#'mkpsis':[\"RUNX1\",\t\"MPL\",\t\"NFE2\",],\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "vulnerable-courage",
   "metadata": {},
   "outputs": [],
   "source": [
    "sc.pl.matrixplot(YS_HSC, var_names = lineage_bias, groupby='stage_groups', dendrogram=False,\n",
    "                 colorbar_title='mean z-score',  vmin=-2, vmax=3, vcenter=-0.2,cmap='RdBu_r',swap_axes=False,save = 'HSC_surival_migration_adhesion')\n",
    "\n",
    "(sc.pl.dotplot(YS_HSC, var_names = lineage_bias, groupby='stage_groups',dendrogram=False, color_map='Reds', show = True,standard_scale='var',swap_axes=True,save = 'HSC_surival_migration_adhesion'))\n",
    "sc.pl.stacked_violin(YS_HSC ,var_names= lineage_bias, groupby='stage_groups',  log=False, use_raw=None, num_categories=7, title=None, colorbar_title='Median exp', figsize=None, dendrogram=False, gene_symbols=None, var_group_positions=None, var_group_labels=None, standard_scale=None, var_group_rotation=None, layer=None, stripplot=False, jitter=False, size=1, scale='width', yticklabels=False, order=None, swap_axes=False, show=None, return_fig=False, row_palette=None, cmap='Reds', ax=None, vmin=None, vmax=None, vcenter=None, norm=None,save = 'HSC_surival_migration_adhesion')\n",
    "#YS_HSC, var_names = lineage_bias, groupby='stage_groups',dendrogram=False, color_map='Reds', show = True,standard_scale='var')\n",
    "sc.pl.tracksplot(YS_HSC ,var_names= lineage_bias, groupby='stage_groups', use_raw=None, log=False, dendrogram=False, gene_symbols=None, var_group_positions=None, var_group_labels=None, layer=None, show=None, save=None )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "inappropriate-victoria",
   "metadata": {},
   "source": [
    "# Dotplots for Liver & AGM & BM too"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "abandoned-produce",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.obs['dataset'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "sweet-register",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.obs['dataset'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "automotive-payment",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.obs['stage_groups'] = adata.obs['dataset_annot'][:]\n",
    "adata.obs['stage_groups'] = adata.obs['stage_groups'].astype(str)\n",
    "stages= ['CS10', 'CS11', 'CS22', 'CS23', 'CS14', 'CS18', 'CS15']\n",
    "groups = ['CS10_11', 'CS10_11', 'CS22_23', 'CS22_23', 'CS14_15', 'CS18', 'CS14_15']\n",
    "dic = dict(zip(stages,groups))\n",
    "#adata.obs['stage_groups'] = adata.obs['stage'].map(dic)\n",
    "adata.obs.loc[adata.obs['stage'].isin(stages),'stage_groups'] = adata.obs['stage'].map(dic)\n",
    "adata.obs['stage_groups'].unique()\n",
    "\n",
    "# order these categories by lineage time\n",
    "ordering =  ['Gastrula_HSPC_lineage_Yolk Sac_gastrulation', 'CS10_11', 'CS14_15', 'CS18','CS22_23', 'EL_HSC', 'FBM_HSC/MPP']\n",
    "adata.obs['stage_groups'] = pd.Categorical(adata.obs['stage_groups'], categories=ordering) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "sexual-participation",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata_no_hsc = adata[~adata.obs['dataset'].isin(['YS','Gastrula'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "focused-owner",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = adata_no_hsc[:]\n",
    "plot_name = 'combined_surival_migration_adhesion'\n",
    "plot_var = 'dataset'\n",
    "markers = lineage_bias\n",
    "\n",
    "sc.pl.matrixplot(data, var_names = markers, groupby=plot_var, dendrogram=False,\n",
    "                 colorbar_title='mean z-score',  vmin=-2, vmax=3, vcenter=-0.2,cmap='RdBu_r',swap_axes=False,save = plot_name)\n",
    "(sc.pl.dotplot(data, var_names = markers, groupby=plot_var,dendrogram=False, color_map='Reds', show = True,standard_scale='var',swap_axes=True,save = plot_name,dot_max=0.5,figsize =[5,5]))\n",
    "sc.pl.stacked_violin(data ,var_names= markers, groupby=plot_var,  log=False, use_raw=None, num_categories=7, title=None, colorbar_title='Median exp', figsize=None, dendrogram=False, gene_symbols=None, var_group_positions=None, var_group_labels=None, standard_scale=None, var_group_rotation=None, layer=None, stripplot=False, jitter=False, size=1, scale='width', yticklabels=False, order=None, swap_axes=False, show=None, return_fig=False, row_palette=None, cmap='Reds', ax=None, vmin=None, vmax=None, vcenter=None, norm=None,save = plot_name)\n",
    "#YS_HSC, var_names = lineage_bias, groupby='stage_groups',dendrogram=False, color_map='Reds', show = True,standard_scale='var')\n",
    "sc.pl.tracksplot(data ,var_names= markers, groupby=plot_var, use_raw=None, log=False, dendrogram=False, gene_symbols=None, var_group_positions=None, var_group_labels=None, layer=None, show=None, save=None )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cathedral-criticism",
   "metadata": {},
   "outputs": [],
   "source": [
    "lineage_bias = {\n",
    "'YS_HSPC_migration':['CD9','CD81','IGFBP2','RAC1','RAC2','ADAM10','RUNX1'],\n",
    "'EMP_generation':['EZH2'],\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "champion-preserve",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = adata_no_hsc[:]\n",
    "plot_name = 'cut_version_combined_surival_migration_adhesion'\n",
    "plot_var = 'dataset'\n",
    "markers = lineage_bias\n",
    "\n",
    "sc.pl.matrixplot(data, var_names = markers, groupby=plot_var, dendrogram=False,\n",
    "                 colorbar_title='mean z-score',  vmin=-2, vmax=3, vcenter=-0.2,cmap='RdBu_r',swap_axes=False,save = plot_name)\n",
    "(sc.pl.dotplot(data, var_names = markers, groupby=plot_var,dendrogram=False, color_map='Reds', show = True,standard_scale='var',swap_axes=True,save = plot_name,dot_max=0.5,figsize =[5,5]))\n",
    "sc.pl.stacked_violin(data ,var_names= markers, groupby=plot_var,  log=False, use_raw=None, num_categories=7, title=None, colorbar_title='Median exp', figsize=None, dendrogram=False, gene_symbols=None, var_group_positions=None, var_group_labels=None, standard_scale=None, var_group_rotation=None, layer=None, stripplot=False, jitter=False, size=1, scale='width', yticklabels=False, order=None, swap_axes=False, show=None, return_fig=False, row_palette=None, cmap='Reds', ax=None, vmin=None, vmax=None, vcenter=None, norm=None,save = plot_name)\n",
    "#YS_HSC, var_names = lineage_bias, groupby='stage_groups',dendrogram=False, color_map='Reds', show = True,standard_scale='var')\n",
    "sc.pl.tracksplot(data ,var_names= markers, groupby=plot_var, use_raw=None, log=False, dendrogram=False, gene_symbols=None, var_group_positions=None, var_group_labels=None, layer=None, show=None, save=None )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "pressed-tiger",
   "metadata": {},
   "outputs": [],
   "source": [
    "EL_stages = {\n",
    "'F61':'CS18',\n",
    "'F35':'CS22_23', #CS23\n",
    "'F32':'CS22_23', #CS22\n",
    "}\n",
    "EL_adata = adata[adata.obs['dataset'].isin(['EL'])]\n",
    "EL_adata.obs['stage'] = EL_adata.obs['fetal_ids'].map(EL_stages)\n",
    "\n",
    "ordering =  ['CS7','CS10_11','CS18','CS22_23']\n",
    "EL_adata.obs['stage'] = pd.Categorical(EL_adata.obs['stage'], categories=ordering) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "driving-fighter",
   "metadata": {},
   "outputs": [],
   "source": [
    "EL_adata.obs['stage'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "handmade-ratio",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = EL_adata[:]\n",
    "plot_name = 'fliv_surival_migration_adhesion'\n",
    "plot_var = 'stage'\n",
    "markers = lineage_bias\n",
    "\n",
    "sc.pl.matrixplot(data, var_names = markers, groupby=plot_var, dendrogram=False,\n",
    "                 colorbar_title='mean z-score',  vmin=-2, vmax=3, vcenter=-0.2,cmap='RdBu_r',swap_axes=False,save = plot_name)\n",
    "(sc.pl.dotplot(data, var_names = markers, groupby=plot_var,dendrogram=False, color_map='Reds', show = True,standard_scale='var',swap_axes=True,save = plot_name,dot_max=0.5,figsize =[3,5]))\n",
    "sc.pl.stacked_violin(data ,var_names= markers, groupby=plot_var,  log=False, use_raw=None, num_categories=7, title=None, colorbar_title='Median exp', figsize=None, dendrogram=False, gene_symbols=None, var_group_positions=None, var_group_labels=None, standard_scale=None, var_group_rotation=None, layer=None, stripplot=False, jitter=False, size=1, scale='width', yticklabels=False, order=None, swap_axes=False, show=None, return_fig=False, row_palette=None, cmap='Reds', ax=None, vmin=None, vmax=None, vcenter=None, norm=None,save = plot_name)\n",
    "#YS_HSC, var_names = lineage_bias, groupby='stage_groups',dendrogram=False, color_map='Reds', show = True,standard_scale='var')\n",
    "sc.pl.tracksplot(data ,var_names= markers, groupby=plot_var, use_raw=None, log=False, dendrogram=False, gene_symbols=None, var_group_positions=None, var_group_labels=None, layer=None, show=None, save=None )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "desirable-ceremony",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "manufactured-convenience",
   "metadata": {},
   "source": [
    "### Immature erythroblasts with extensive ex vivo self-renewal capacity emerge from the early mammalian fetus\n",
    "- mayb 2 waves of erythroid production?? propr to gastrula data and after gastrula data - self renewing\n",
    "- Sdf-1 (CXCL12) induces CD9 expression "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "documentary-lawsuit",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "spiritual-modern",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "aggressive-planning",
   "metadata": {},
   "source": [
    "# try to order by stage"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "thirty-bernard",
   "metadata": {},
   "outputs": [],
   "source": [
    "scanpy.tl.diffmap(adata, n_comps=15, neighbors_key=None, random_state=0, copy=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "hidden-circulation",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "institutional-spare",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.obs['stage_groups'] = YS_HSC.obs['dataset_annot'][:]\n",
    "YS_HSC.obs['stage_groups'] = YS_HSC.obs['stage_groups'].astype(str)\n",
    "stages= ['CS10', 'CS11', 'CS22', 'CS23', 'CS14', 'CS18', 'CS15']\n",
    "groups = ['CS10_11', 'CS10_11', 'CS22_23', 'CS22_23', 'CS14_15', 'CS18', 'CS14_15']\n",
    "dic = dict(zip(stages,groups))\n",
    "#YS_HSC.obs['stage_groups'] = YS_HSC.obs['stage'].map(dic)\n",
    "YS_HSC.obs.loc[YS_HSC.obs['stage'].isin(stages),'stage_groups'] = YS_HSC.obs['stage'].map(dic)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "egyptian-greeting",
   "metadata": {},
   "outputs": [],
   "source": [
    "sc.tl.embedding_density(adata, groupby='dataset_annot')\n",
    "map_scores = []\n",
    "for i in adata.obs['dataset_annot'].unique():\n",
    "    # make bg blue\n",
    "    adata.obs['umap_density_dataset_annot_'+i] = adata.obs['umap_density_dataset_annot']\n",
    "    adata.obs.loc[~adata.obs['dataset_annot'].isin([i]),('umap_density_dataset_annot_'+i)] = 0.1\n",
    "    #sc.pl.umap(adata,color = ('umap_density_dataset_annot_'+i),color_map = 'turbo')\n",
    "    map_scores.append('umap_density_dataset_annot_'+i)\n",
    "#sc.pl.umap(adata,color = 'umap_density_dataset_annot',color_map = 'turbo')\n",
    "#sc.pl.embedding_density(adata, groupby='dataset_annot',color_map = 'seismic')\n",
    "sc.pl.umap(adata,color = map_scores,color_map = 'turbo',legend_loc=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "endless-change",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.obs['dataset_annot'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "minor-medicaid",
   "metadata": {},
   "source": [
    "# DE in HSPC for GSEA over time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "stopped-affiliate",
   "metadata": {},
   "outputs": [],
   "source": [
    "gene_sets = {'metabolic' :['/nfs/team205/ig7/resources/GO-0045333_cell_respiration.csv'],\n",
    "'cell_cycle' : ['/nfs/team205/ig7/resources/GO-0022402_cell_cycle_genes.csv'],\n",
    "'cell_cell_adhesion':['/nfs/team205/ig7/resources/GO_0016337_cell_cell_adhesion.csv'],\n",
    "'cell_matrix_adhesion': ['/nfs/team205/ig7/resources/GO_0007160_cell_matrix_adhesion.csv'],\n",
    "'endo_cell_matrix_adhesion' :[ '/nfs/team205/ig7/resources/GO_0090673_endo_cell_matrix_adhesion.csv'],\n",
    "'GNF2_SELL':['/nfs/team205/ig7/resources/GNF2_SELL.csv'],\n",
    "'GNF2_ICAM3':['/nfs/team205/ig7/resources/GNF2_ICAM3.csv'],}\n",
    "for i in gene_sets.keys():\n",
    "    gene_list_loc = ''.join(str(e) for e in gene_sets[i])\n",
    "    gene_list_name = i\n",
    "    gene_list = list(pd.read_csv(gene_list_loc,header=None)[0])\n",
    "    gene_list = list(adata.var.index[adata.var.index.isin(gene_list)])\n",
    "    print(len(gene_list))\n",
    "    sc.tl.score_genes(YS_HSC, gene_list, ctrl_size=50, gene_pool=None, n_bins=25, score_name=(gene_list_name + '_score'), random_state=0, copy=False, use_raw=None)\n",
    "    \n",
    "scores = YS_HSC.obs[[s + '_score' for s in list(gene_sets.keys())]]\n",
    "scores['group'] = YS_HSC.obs['stage_groups']\n",
    "scores.groupby('group').median()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cognitive-costume",
   "metadata": {},
   "outputs": [],
   "source": [
    "gene_list_name + '_score'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "australian-homework",
   "metadata": {},
   "source": [
    "## Plot HB genes across time starting from early gastrula ery"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ideal-huntington",
   "metadata": {},
   "outputs": [],
   "source": [
    "YS_HSC.obs['celltype_for_comparison'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "vocal-billion",
   "metadata": {},
   "outputs": [],
   "source": [
    "scores = YS_HSC.obs[[s + '_score' for s in list(gene_sets.keys())]]\n",
    "scores['group'] = YS_HSC.obs['stage_groups']\n",
    "scores.groupby('group').median()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "graphic-ratio",
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.heatmap(scores.groupby('group').median(),  annot=True,vmin=-1, vmax=1, linewidths=1, center=0, square=True, cbar_kws={\"shrink\": 0.5})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "damaged-agreement",
   "metadata": {},
   "outputs": [],
   "source": [
    "sc.tl.rank_genes_groups(YS_HSC, 'stage_groups', method='wilcoxon',n_genes=500)\n",
    "result = YS_HSC.uns['rank_genes_groups']\n",
    "groups = result['names'].dtype.names\n",
    "DE = pd.DataFrame(\n",
    "    {group + '_' + key[:1]: result[key][group]\n",
    "    for group in groups for key in ['names', 'pvals','logfoldchanges']}).head(500)\n",
    "\n",
    "DE_name =\"./DEGS_YS_HSC_overtime.csv\"\n",
    "DE.to_csv(DE_name)\n",
    "\n",
    "degs = DE[:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fifty-excess",
   "metadata": {},
   "outputs": [],
   "source": [
    "degs = DE[:]\n",
    "\n",
    "if 'concat' in locals() or 'concat' in globals():\n",
    "    del(concat)\n",
    "n = degs.loc[:, degs.columns.str.endswith(\"_n\")]\n",
    "n = pd.melt(n)\n",
    "p = degs.loc[:, degs.columns.str.endswith(\"_p\")]\n",
    "p = pd.melt(p)\n",
    "l = degs.loc[:, degs.columns.str.endswith(\"_l\")]\n",
    "l = pd.melt(l)\n",
    "n = n.replace(regex=r'_n', value='')\n",
    "\n",
    "n = n.rename(columns={\"variable\": \"cluster\", \"value\": \"gene\"})\n",
    "p = (p.drop([\"variable\"],axis = 1)).rename(columns={ \"value\": \"p_val\"})\n",
    "l = (l.drop([\"variable\"],axis = 1)).rename(columns={ \"value\": \"logfc\"})\n",
    "\n",
    "concat = pd.concat([n,p,l],axis=1)\n",
    "\n",
    "#remove mito genes from data\n",
    "concat = concat[~concat[\"gene\"].str.startswith(\"MT-\")]\n",
    "concat = concat[~concat[\"gene\"].str.startswith(\"RP11-\")]\n",
    "concat = concat[~concat[\"gene\"].str.startswith(\"RPL\")]\n",
    "concat = concat[~concat[\"gene\"].str.startswith(\"RPS\")]\n",
    "\n",
    "concat[\"cluster\"] = concat[\"cluster\"].astype(str)\n",
    "marker_df = concat.groupby('cluster').apply(lambda grp: grp.nsmallest(20, 'p_val')).reset_index(drop=True)\n",
    "marker_df = marker_df.groupby('cluster').apply(lambda grp: grp.nlargest(5, 'logfc')).reset_index(drop=True)\n",
    "markers = marker_df.groupby('cluster')['gene'].apply(list).to_dict()\n",
    "markers = dict(sorted(markers.items()))\n",
    "markers = {str(k):v for k,v in markers.items()}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "flexible-designer",
   "metadata": {},
   "outputs": [],
   "source": [
    "markers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "infectious-assembly",
   "metadata": {},
   "outputs": [],
   "source": [
    "markers ={'CS7': ['U2AF1L5', 'C11orf98', 'MRPL38', 'DDX39B', 'SARNP'],\n",
    "'CS10_11': ['IGFBP2', 'SLC16A3', 'BNIP3', 'MAP2K2', 'PSMA2'],\n",
    " 'CS14_15': ['GPX1', 'AC090498.1', 'MTRNR2L12', 'ATP6V0C', 'UQCRHL'],\n",
    " 'CS18': ['MTRNR2L12', 'GPX1', 'AC090498.1', 'ATP6V0C', 'UQCRHL'],\n",
    " 'CS22_23': ['ALB', 'AC104389.1', 'AREG', 'LUM', 'FRZB'],}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dominant-tucson",
   "metadata": {},
   "outputs": [],
   "source": [
    "(sc.pl.dotplot(YS_HSC, var_names = markers,groupby='stage_groups',dendrogram=False, color_map='Reds', show = True,standard_scale='var',swap_axes=False,save = 'HSC_DEGS_by_time'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "primary-spine",
   "metadata": {},
   "outputs": [],
   "source": [
    "concat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "instrumental-jungle",
   "metadata": {},
   "outputs": [],
   "source": [
    "import gseapy\n",
    "gene_set_names = gseapy.get_library_name(database='Human')\n",
    "glist = list(concat['gene'][concat['cluster'].isin(['CS7'])])\n",
    "#glist = list(concat['gene'][concat['cluster'].isin(['monocyte_Yolk Sac_gastrulation'])])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "essential-tattoo",
   "metadata": {},
   "outputs": [],
   "source": [
    "# order these categories by lineage time\n",
    "ordering =  ['Gastrula_HSPC_lineage_Yolk Sac_gastrulation', 'CS10_11', 'CS14_15', 'CS18','CS22_23','AGM_10_HSPC', 'EL_HSC', 'FBM_HSC/MPP']\n",
    "adata.obs['stage_groups'] = pd.Categorical(adata.obs['stage_groups'], categories=ordering) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "honey-olympus",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.obs['stage_groups'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "excessive-little",
   "metadata": {},
   "source": [
    "# Reference main ys obj"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "southwest-product",
   "metadata": {},
   "outputs": [],
   "source": [
    "ys_main = sc.read('/nfs/team205/ig7/work_backups/backup_210306/projects/YS/YS_data/A4_V7_YS_integrated_data_singlets_with_raw_counts_for_MS_plotting_20211111_with_obsp.h5ad')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "intermediate-yukon",
   "metadata": {},
   "source": [
    "# Proportions of each population by age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "little-peoples",
   "metadata": {},
   "outputs": [],
   "source": [
    "list(ys_main.obs['cell.labels'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "arbitrary-senator",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.rcParams['figure.figsize'] = [5, 5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ahead-murray",
   "metadata": {},
   "outputs": [],
   "source": [
    "keep = [ 'HSPC_1',\n",
    "'HSPC_2',\n",
    "'MEMP',\n",
    " 'Early_Erythroid',\n",
    " 'Erythroid',\n",
    " 'MK',]\n",
    "ys_main.obs['cell.labels'] = ys_main.obs['cell.labels'].astype(str)\n",
    "ys_main.obs['stage_groups'] = ys_main.obs['cell.labels'][:]\n",
    "ys_main.obs['stage_groups'] = ys_main.obs['stage_groups'].astype(str)\n",
    "stages= ['CS10', 'CS11', 'CS22', 'CS23', 'CS14', 'CS18', 'CS15']\n",
    "groups = ['CS10_11', 'CS10_11', 'CS22_23', 'CS22_23', 'CS14_15', 'CS18', 'CS14_15']\n",
    "dic = dict(zip(stages,groups))\n",
    "#YS_HSC.obs['stage_groups'] = YS_HSC.obs['stage'].map(dic)\n",
    "ys_main.obs.loc[ys_main.obs['stage'].isin(stages),'stage_groups'] = ys_main.obs['stage'].map(dic)\n",
    "ys_main.obs['stage_groups'].unique()\n",
    "\n",
    "obs = ys_main.obs[ys_main.obs['cell.labels'].isin(keep)]\n",
    "obs['cell.labels'] = pd.Categorical(obs['cell.labels'], categories=keep) \n",
    "\n",
    "count1 = pd.DataFrame((obs.groupby(['stage_groups','cell.labels'], observed=True).count()).iloc[:,0])\n",
    "count1 = count1.reset_index() \n",
    "for i in count1['stage_groups']:\n",
    "    total = np.sum(count1.loc[count1['stage_groups'].isin([i]),'stage'])\n",
    "    count1.loc[count1['stage_groups'].isin([i]),'stage'] = (count1.loc[count1['stage_groups'].isin([i]),'stage']/total)*100\n",
    "# Reorder categories\n",
    "count1['cell.labels'] = pd.Categorical(count1['cell.labels'], categories=keep) \n",
    "# Reorder categories\n",
    "count1.pivot_table('stage','stage_groups','cell.labels').plot.bar(stacked=True, figsize=(10,10)).legend(loc='upper right')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fitted-island",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.rcParams['figure.figsize'] = [5, 5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "helpful-heather",
   "metadata": {},
   "outputs": [],
   "source": [
    "sc.pl.umap(adata,color = 'dataset_annot',palette = col_dic,save = 'HSPC_combined_color_umap')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "designing-nature",
   "metadata": {},
   "outputs": [],
   "source": [
    "sc.tl.embedding_density(adata, groupby='dataset_annot')\n",
    "map_scores = []\n",
    "for i in adata.obs['dataset_annot'].unique():\n",
    "    # make bg blue\n",
    "    adata.obs['umap_density_dataset_annot_'+i] = adata.obs['umap_density_dataset_annot']\n",
    "    adata.obs.loc[~adata.obs['dataset_annot'].isin([i]),('umap_density_dataset_annot_'+i)] = 0.1\n",
    "    #sc.pl.umap(adata,color = ('umap_density_dataset_annot_'+i),color_map = 'turbo')\n",
    "    map_scores.append('umap_density_dataset_annot_'+i)\n",
    "#sc.pl.umap(adata,color = 'umap_density_dataset_annot',color_map = 'turbo')\n",
    "#sc.pl.embedding_density(adata, groupby='dataset_annot',color_map = 'seismic')\n",
    "sc.pl.umap(adata,color = map_scores,color_map = 'turbo',legend_loc=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "accessory-individual",
   "metadata": {},
   "outputs": [],
   "source": [
    "sc.tl.embedding_density(adata, groupby='dataset_annot')\n",
    "map_scores = []\n",
    "for i in adata.obs['dataset_annot'].unique():\n",
    "    # make bg blue\n",
    "    adata.obs['umap_density_dataset_annot_'+i] = adata.obs['umap_density_dataset_annot']\n",
    "    adata.obs.loc[~adata.obs['dataset_annot'].isin([i]),('umap_density_dataset_annot_'+i)] = 0.1\n",
    "    #sc.pl.umap(adata,color = ('umap_density_dataset_annot_'+i),color_map = 'turbo')\n",
    "    map_scores.append('umap_density_dataset_annot_'+i)\n",
    "#sc.pl.umap(adata,color = 'umap_density_dataset_annot',color_map = 'turbo')\n",
    "#sc.pl.embedding_density(adata, groupby='dataset_annot',color_map = 'seismic')\n",
    "sc.pl.umap(adata,color = map_scores,color_map = 'turbo',legend_loc=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "surprising-parish",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.write('./HSC_HSPC_combined_density_estimated.h5ad')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "capital-honor",
   "metadata": {},
   "source": [
    "### Itga2b regulation at the onset of definitive hematopoiesis and commitment to differentiation\n",
    "CD41 contributes to hematopoietic stem cell (HSC) and megakaryocyte/platelet functions. CD41 expression marks the onset of definitive hematopoiesis in the embryo where it participates in regulating the numbers of multipotential progenitors. Key to platelet aggregation, CD41 expression also characterises their precursor, the megakaryocyte, and is specifically up regulated during megakaryopoiesis. Though phenotypically unique, megakaryocytes and HSC share numerous features, including key transcription factors, which could indicate common sub-regulatory networ\n",
    "\n",
    "### CD9\n",
    "- Tetraspanin CD9 has also been described as a regulator of HSPC adhesion and homing. Pretreatment of cord blood CD34+ cells with an anti-CD9 monoclonal antibody inhibited CXCL12-mediated transendothelial migration; however, adhesion to fibronectin and endothelial cells was enhanced (Leung et al., 2011). \n",
    "- CD9 blockage inhibits homing to BM and spleen\n",
    "- Additionally, antibody pretreatment of CD34+ cells significantly impaired their homing to the BM and sorted CD34+ CD9– cells displayed lower BM homing capacity compared with that of total CD34+ cells.\n",
    "* **Tetraspanin Scaffold Proteins Function as Key Regulators of Hematopoietic Stem Cells https://www.frontiersin.org/articles/10.3389/fcell.2020.00598/full**\n",
    "* **The tetraspanin CD9 regulates migration, adhesion, and homing of human cord blood CD34+ hematopoietic stem and progenitor cells**\n",
    "* **Differential Expression of the Tetraspanin CD9 in Normal and Leukemic Stem Cells**\n",
    "* **CD9, a key actor in the dissemination of lymphoblastic leukemia, modulating CXCR4-mediated migration via RAC1 signaling**\n",
    "- After C-X-C motif chemokine ligand 12 (CXCL12) stimulation, CD9 promoted the formation of long cytoplasmic actin-rich protrusions. We demonstrated that CD9 enhanced RAC1 activation, in both REH cells and blasts from patients. \n",
    "- inhibition of RAC1 activation decreased migration in vitro,\n",
    "\n",
    "* **Disruption of CD9 Expression Affects Adhesion, Migration, and Actin Polymerization through RAC1 Signalling Pathway in ETV6/RUNX1 Pre-B Lymphocytes**\n",
    "- demonstrated that cells depleted in CD9 have lost their ability to activate RAC1 in response to CXCL12\n",
    "\n",
    "\n",
    "### RAC1\n",
    "- Disruption of CD9 Expression Affects Adhesion, Migration, and Actin Polymerization through RAC1 Signalling Pathway in ETV6/RUNX1 Pre-B Lymphocytes.\n",
    "* **Rac1 Regulates Migration of Yolk Sac Hematopoietic Progenitors into the Blood, a Process Essential for Subsequent Seeding of Fetal Liver Hematopoiesis.**\n",
    "- Rac1/2 and cdc42 deletion prevents FL HSC from reaching the marrow for transition of hematopoiesis, consistent with their importance in upstream regulation of actin polymerization, epistatically above both WAVE and WASP\n",
    "* **The Wave2 scaffold Hem-1 is required for transition of fetal liver hematopoiesis to bone marrow**\n",
    "\n",
    "- Rac1 is dispensable for steady-state hematopoiesis\n",
    "- RAC1- demonstrated defective proliferative signaling via the receptor tyrosine kinase, c-kit, while loss of Rac2 activity leads to a pro-apoptotic phenotype\n",
    "* **On how Rac controls hematopoietic stem cell activity**\n",
    "\n",
    "- Rac2-deficient HSCs show defective migration and adhesion resulting in reduced retention in the marrow and increased mobilization into circulation.26  Rac1-deficient HSCs/Ps demonstrate decreased homing to BM and impaired endosteal microlocalization upon transplantation. However, if already resident in BM, Rac1 deficiency does not impair steady-state hematopoiesis, suggesting Rac1 is a key molecular switch regulating engraftment.21 \n",
    "* **Rac1 is essential for intraembryonic hematopoiesis and for the initial seeding of fetal liver with definitive hematopoietic progenitor cells**\n",
    "\n",
    "### CD81\n",
    "- Pull-down experiments revealed that CD81-Rac interaction was direct and independent of Rac activation status. Knockdown of CD81 resulted in enhanced protrusion rate, altered focal adhesion formation, and decreased cell migration, correlating with increased active Rac.\n",
    "* **CD81 regulates cell migration through its association with Rac GTPase**\n",
    "* **CD81 is essential for the formation of membrane protrusions and regulates Rac1-activation in adhesion-dependent immune cell migration**\n",
    "\n",
    "### CD74\n",
    "- Here, we demonstrate that mice lacking CD74 exhibit an accumulation of HSCs in the bone marrow (BM) due to their increased potential to repopulate and compete for BM niches.\n",
    "-    CD74 is a regulator of hematopoietic stem cell maintenance:: lack of CD74, leads to lack of HSC migration\n",
    "\n",
    "### TPT1\n",
    "- Megakaryocytic lineage transition\n",
    "- overexpression remarkably induced cell proliferation, migration and invasion, and significantly attenuated cell adhesion ability in vitro in epithelial ovarian cancer through TPT1 and downstream PI3K/AKT signaling\n",
    "-    LncRNA TPT1-AS1 promotes tumorigenesis and metastasis in epithelial ovarian cancer by inducing TPT1 expression.\n",
    "\n",
    "### CD24\n",
    "- Inhibits Erythroid differentiation TNF-induced CD24 expression at the RNA and protein level\n",
    "- The Role of CD24 in TNF-Alpha-Inhibited Erythroid Differentiation and Its Signaling Pathway\n",
    "\n",
    "### Cd63\n",
    "- tetraspanin CD63 was found to interact with the tissue inhibitor of metalloproteinase-1 (TIMP1), a protein important for HSC quiescence and long-term engraftment (Jung et al., 2006). TIMP1 was shown to bind to the CD63/β1 integrin complex on the surface of human CD34+ HSPCs to induce adhesion and migration (Wilk et al., 2013). Moreover, this group determined that homing and short-term engraftment of HSPCs were also increased upon exogenous stimulation with TIMP1. The interaction of TIMP1 and CD63 was also shown to impact HSPC proliferation through the activation of the PI3K/AKT signaling pathway\n",
    "\n",
    "- CD34+ HSPCs to induce adhesion and migration (Wilk et al., 2013). Moreover, this group determined that homing and short-term engraftment of HSPCs were also increased upon exogenous stimulation with TIMP1. The interaction of TIMP1 and CD63 was also shown to impact HSPC proliferation through the activation of the PI3K/AKT signaling pathway (Rossi et al., 2015) and the enrichment of myeloid progenitors, impacting granulopoiesis (Kobuch et al.,\n",
    "\n",
    "### EZh2\n",
    "- Ezh2 is essential for YS hematopoiesis but dispensable for subsequent aorta–gonad–mesonephros (AGM) blood development. Loss of EZH2 activity in hemogenic endothelium (HE) leads to the generation of phenotypically intact but functionally deficient erythro-myeloid progenitors (EMPs), while the generation of primitive erythroid cells is not affected.\n",
    "* **Ezh2 is essential for the generation of functional yolk sac derived erythro-myeloid progenitors **\n",
    "\n",
    "### IGFBP2\n",
    "* **IGF binding protein 2 supports the survival and cycling of hematopoietic stem cells**\n",
    "\n",
    "# Extrinsic modifiers\n",
    "\n",
    "### NOTCH1\n",
    "- Notch signaling was inhibited by CD9 knockdown or CD9 antibody in cell lines. Finally, CD9 antibody showed anti-tumor effects in cell proliferation MTT assay, transwell migration assay and colony formation assay.\n",
    "* **Tetraspanin CD9 interacts with α-secretase to enhance its oncogenic function in pancreatic cancer**\n",
    "\n",
    "* **Notch1 regulates progenitor cell proliferation and differentiation during mouse yolk sac hematopoiesis**\n",
    "* **Notch Stimulates Both Self-Renewal and Lineage Plasticity in a Subset of Murine CD9High Committed Megakaryocytic Progenitors**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "combined-estate",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "positive-birmingham",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "workhorse",
   "language": "python",
   "name": "workhorse"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
